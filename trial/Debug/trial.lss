
trial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000386  00800060  000013f6  0000146a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001820  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000002e8  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004035  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a45  00000000  00000000  00005b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f0f  00000000  00000000  000065be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000604  00000000  00000000  000084d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009fe  00000000  00000000  00008ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020e3  00000000  00000000  000094d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  0000b5b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__vector_1>
       8:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__vector_2>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	a7 07       	cpc	r26, r23
      56:	ab 07       	cpc	r26, r27
      58:	af 07       	cpc	r26, r31
      5a:	b3 07       	cpc	r27, r19
      5c:	b7 07       	cpc	r27, r23
      5e:	bb 07       	cpc	r27, r27
      60:	bf 07       	cpc	r27, r31
      62:	c3 07       	cpc	r28, r19
      64:	d4 07       	cpc	r29, r20
      66:	da 07       	cpc	r29, r26
      68:	e0 07       	cpc	r30, r16
      6a:	e6 07       	cpc	r30, r22
      6c:	ec 07       	cpc	r30, r28
      6e:	f2 07       	cpc	r31, r18
      70:	f8 07       	cpc	r31, r24
      72:	fe 07       	cpc	r31, r30

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	13 e0       	ldi	r17, 0x03	; 3
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e6 ef       	ldi	r30, 0xF6	; 246
      88:	f3 e1       	ldi	r31, 0x13	; 19
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a6 3e       	cpi	r26, 0xE6	; 230
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	23 e0       	ldi	r18, 0x03	; 3
      98:	a6 ee       	ldi	r26, 0xE6	; 230
      9a:	b3 e0       	ldi	r27, 0x03	; 3
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a6 3e       	cpi	r26, 0xE6	; 230
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
      aa:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
*/


#include "main.h"
int main(void)
{
      b2:	ef 92       	push	r14
      b4:	ff 92       	push	r15
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
/**********************************************Intialization_Section********************************************/
	LCD_Initialize();
      be:	0e 94 90 06 	call	0xd20	; 0xd20 <LCD_Initialize>
	UART_Initialize(Asynchronous,Disable,Bit_1,Bits_8);
      c2:	23 e0       	ldi	r18, 0x03	; 3
      c4:	40 e0       	ldi	r20, 0x00	; 0
      c6:	60 e0       	ldi	r22, 0x00	; 0
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	0e 94 78 09 	call	0x12f0	; 0x12f0 <UART_Initialize>
	 LED0_Initialize();
      ce:	0e 94 41 07 	call	0xe82	; 0xe82 <LED0_Initialize>
	 BUZZER_Initialize();
      d2:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_Initialize>
	 Motor_Initialize();
      d6:	0e 94 d2 05 	call	0xba4	; 0xba4 <Motor_Initialize>
	 EXT_INTERRUPT_Initialization(EXT_INT0 ,HIGH);
      da:	61 e0       	ldi	r22, 0x01	; 1
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	0e 94 1f 09 	call	0x123e	; 0x123e <EXT_INTERRUPT_Initialization>
	 EXT_INTERRUPT_Initialization(EXT_INT1 , HIGH);
      e2:	61 e0       	ldi	r22, 0x01	; 1
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	0e 94 1f 09 	call	0x123e	; 0x123e <EXT_INTERRUPT_Initialization>
	 ADC_Initialization(ADC_PR16,AVCC);
      ea:	61 e0       	ldi	r22, 0x01	; 1
      ec:	84 e0       	ldi	r24, 0x04	; 4
      ee:	0e 94 8b 07 	call	0xf16	; 0xf16 <ADC_Initialization>
	uint8_t count= 3 ; /*A Variable Used To Count How many Times did the user enter his Password (limit 3 times)*/
	uint8_t enter_system=1;/*A Variable Flag Used To know if the users entered the system or not*/
	uint8_t pass = 0 ; /*A Variable used to save Password char by char */
/****************************************************************************************************************/
/**********************************************System Start up***************************************************/
	LCD_Write_Command(0X84);
      f2:	84 e8       	ldi	r24, 0x84	; 132
      f4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
	LCD_Write_string("LOGIN Mode");
      f8:	80 e6       	ldi	r24, 0x60	; 96
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
	LCD_Write_Command(0XC0);
     100:	80 ec       	ldi	r24, 0xC0	; 192
     102:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
	LCD_Write_string("ENTER DATA");
     106:	8b e6       	ldi	r24, 0x6B	; 107
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
	UART_SENDSTRING("1:-user1\r\n");
     10e:	86 e7       	ldi	r24, 0x76	; 118
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
	UART_SENDSTRING("2:-user2\r\n");
     116:	81 e8       	ldi	r24, 0x81	; 129
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
	UART_SENDSTRING("3:-Admin \r\n");
     11e:	8c e8       	ldi	r24, 0x8C	; 140
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
	UART_SENDSTRING("enter your choice");
     126:	88 e9       	ldi	r24, 0x98	; 152
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
	x =  UART_Received();
     12e:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
     132:	c8 2f       	mov	r28, r24
	user_id = x ; 
	UART_SENDSTRING("user");
     134:	8a ea       	ldi	r24, 0xAA	; 170
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
	uart_sendchar(user_id);
     13c:	8c 2f       	mov	r24, r28
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 94 09 	call	0x1328	; 0x1328 <uart_sendchar>
	UART_SENDSTRING("\r\n");
     144:	85 ea       	ldi	r24, 0xA5	; 165
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
	uint8_t x=0;       /*Temporary Variable to take the USART Value from Virtual Terminal */
	uint8_t user_id=0; /*Variable Used To take The User ID From USART*/
	uint8_t data= 0 ;  /*Temporary Variable To take Users Commands*/
	uint8_t flag= 0 ;  /*A Flag Variable That Indicates Every Password Character is Right*/
	uint8_t count= 3 ; /*A Variable Used To Count How many Times did the user enter his Password (limit 3 times)*/
	uint8_t enter_system=1;/*A Variable Flag Used To know if the users entered the system or not*/
     14c:	11 e0       	ldi	r17, 0x01	; 1
	uint16_t temp=0;   /*Global Variable Used to take the value of LM35 Sensors*/
	uint8_t x=0;       /*Temporary Variable to take the USART Value from Virtual Terminal */
	uint8_t user_id=0; /*Variable Used To take The User ID From USART*/
	uint8_t data= 0 ;  /*Temporary Variable To take Users Commands*/
	uint8_t flag= 0 ;  /*A Flag Variable That Indicates Every Password Character is Right*/
	uint8_t count= 3 ; /*A Variable Used To Count How many Times did the user enter his Password (limit 3 times)*/
     14e:	d3 e0       	ldi	r29, 0x03	; 3
/**********************************************Global_Variables*************************************************/
	uint16_t temp=0;   /*Global Variable Used to take the value of LM35 Sensors*/
	uint8_t x=0;       /*Temporary Variable to take the USART Value from Virtual Terminal */
	uint8_t user_id=0; /*Variable Used To take The User ID From USART*/
	uint8_t data= 0 ;  /*Temporary Variable To take Users Commands*/
	uint8_t flag= 0 ;  /*A Flag Variable That Indicates Every Password Character is Right*/
     150:	00 e0       	ldi	r16, 0x00	; 0
				}
			break;
			default:
			break;
		}
		if (count == 0) /*If the User Entered the Password Wrong 3 Times*/
     152:	ff 24       	eor	r15, r15
     154:	f3 94       	inc	r15
	UART_SENDSTRING("\r\n");
/****************************************************************************************************************/
/***********************************************Infinite_Loop_System*********************************************/
	while(1)
	{
		switch(user_id)/*Switching between The user*/
     156:	c2 33       	cpi	r28, 0x32	; 50
     158:	09 f4       	brne	.+2      	; 0x15c <main+0xaa>
     15a:	8b c0       	rjmp	.+278    	; 0x272 <main+0x1c0>
     15c:	c3 33       	cpi	r28, 0x33	; 51
     15e:	09 f4       	brne	.+2      	; 0x162 <main+0xb0>
     160:	0d c1       	rjmp	.+538    	; 0x37c <main+0x2ca>
     162:	c1 33       	cpi	r28, 0x31	; 49
     164:	09 f0       	breq	.+2      	; 0x168 <main+0xb6>
     166:	8e c1       	rjmp	.+796    	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
		{
			case '1':
			UART_SENDSTRING("welcome user 1 enter your password digit by digit");
     168:	8f ea       	ldi	r24, 0xAF	; 175
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
			pass = UART_Received();
     170:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
     174:	e8 2e       	mov	r14, r24
			UART_SENDSTRING(pass);/*Entering The First Password Character*/
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
			UART_SENDSTRING("\r\n");
     17c:	85 ea       	ldi	r24, 0xA5	; 165
     17e:	92 e0       	ldi	r25, 0x02	; 2
     180:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
			if (pass == '1')
     184:	21 e3       	ldi	r18, 0x31	; 49
     186:	e2 12       	cpse	r14, r18
     188:	6e c0       	rjmp	.+220    	; 0x266 <main+0x1b4>
			{
				/*Making Sure that the first char is 1*/
				UART_SENDSTRING("enter second digit");
     18a:	81 ee       	ldi	r24, 0xE1	; 225
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
				pass = UART_Received();
     192:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
     196:	e8 2e       	mov	r14, r24
				UART_SENDSTRING(pass);
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
				UART_SENDSTRING("\r\n");
     19e:	85 ea       	ldi	r24, 0xA5	; 165
     1a0:	92 e0       	ldi	r25, 0x02	; 2
     1a2:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
				if (pass == '2')
     1a6:	82 e3       	ldi	r24, 0x32	; 50
     1a8:	e8 12       	cpse	r14, r24
     1aa:	57 c0       	rjmp	.+174    	; 0x25a <main+0x1a8>
				{
				/*Making Sure that the first char is 2*/

					UART_SENDSTRING("enter third digit");
     1ac:	84 ef       	ldi	r24, 0xF4	; 244
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					pass = UART_Received();
     1b4:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
     1b8:	e8 2e       	mov	r14, r24
					UART_SENDSTRING(pass);
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					UART_SENDSTRING("\r\n");
     1c0:	85 ea       	ldi	r24, 0xA5	; 165
     1c2:	92 e0       	ldi	r25, 0x02	; 2
     1c4:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					if (pass == '3')
     1c8:	93 e3       	ldi	r25, 0x33	; 51
     1ca:	e9 12       	cpse	r14, r25
     1cc:	40 c0       	rjmp	.+128    	; 0x24e <main+0x19c>
					{
				/*Making Sure that the first char is 3 and Entering the System */
						
						UART_SENDSTRING("WELCOME");
     1ce:	86 e0       	ldi	r24, 0x06	; 6
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						LCD_Write_string("Welcome User 1 ");
     1d6:	8e e0       	ldi	r24, 0x0E	; 14
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1de:	2f ef       	ldi	r18, 0xFF	; 255
     1e0:	82 e5       	ldi	r24, 0x52	; 82
     1e2:	97 e0       	ldi	r25, 0x07	; 7
     1e4:	21 50       	subi	r18, 0x01	; 1
     1e6:	80 40       	sbci	r24, 0x00	; 0
     1e8:	90 40       	sbci	r25, 0x00	; 0
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x132>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x13c>
     1ee:	00 00       	nop
						_delay_ms(300);
						LCD_ClearScreen();
     1f0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
						/*Displaying the User Menu*/
						UART_SENDSTRING("Welcome User1 Home \r\n");
     1f4:	8e e1       	ldi	r24, 0x1E	; 30
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("Enter your choice please \r\n");
     1fc:	84 e3       	ldi	r24, 0x34	; 52
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("1:On/Off light \r\n");
     204:	80 e5       	ldi	r24, 0x50	; 80
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("2:Temp \r\n");
     20c:	82 e6       	ldi	r24, 0x62	; 98
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("3:Open/Close DOOR \r\n");
     214:	8c e6       	ldi	r24, 0x6C	; 108
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("4:Open Oven \r\n");
     21c:	81 e8       	ldi	r24, 0x81	; 129
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("5:Close Oven \r\n");
     224:	80 e9       	ldi	r24, 0x90	; 144
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("6:Open Air Conditional \r\n");
     22c:	80 ea       	ldi	r24, 0xA0	; 160
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("7:Close Air Conditional \r\n");
     234:	8a eb       	ldi	r24, 0xBA	; 186
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("8:Open Bathrooms \r\n");
     23c:	85 ed       	ldi	r24, 0xD5	; 213
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("9:Open Kitchen \r\n");
     244:	89 ee       	ldi	r24, 0xE9	; 233
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
     24c:	1b c4       	rjmp	.+2102   	; 0xa84 <__stack+0x225>
						flag = 1 ;/*Indicating that the user is Verified*/
					}
					else
					{
						UART_SENDSTRING("NOO");
     24e:	8b ef       	ldi	r24, 0xFB	; 251
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						count -- ;
     256:	d1 50       	subi	r29, 0x01	; 1
     258:	15 c1       	rjmp	.+554    	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
					}
				}
				else
				{
					UART_SENDSTRING("NOO");
     25a:	8b ef       	ldi	r24, 0xFB	; 251
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					count -- ;
     262:	d1 50       	subi	r29, 0x01	; 1
     264:	0f c1       	rjmp	.+542    	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
				}
			}
			else
			{
				UART_SENDSTRING("NOO");
     266:	8b ef       	ldi	r24, 0xFB	; 251
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
				count -- ;
     26e:	d1 50       	subi	r29, 0x01	; 1
     270:	09 c1       	rjmp	.+530    	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
			}
			break;
			case '2':
				UART_SENDSTRING("welcome user 2 enter your password digit by digit");
     272:	8f ef       	ldi	r24, 0xFF	; 255
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
				pass = UART_Received();
     27a:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
     27e:	e8 2e       	mov	r14, r24
				UART_SENDSTRING(pass);
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
				UART_SENDSTRING("\r\n");
     286:	85 ea       	ldi	r24, 0xA5	; 165
     288:	92 e0       	ldi	r25, 0x02	; 2
     28a:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
				if (pass == '4')
     28e:	24 e3       	ldi	r18, 0x34	; 52
     290:	e2 12       	cpse	r14, r18
     292:	6e c0       	rjmp	.+220    	; 0x370 <main+0x2be>
				{
					UART_SENDSTRING("enter second digit");
     294:	81 ee       	ldi	r24, 0xE1	; 225
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					pass = UART_Received();
     29c:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
     2a0:	e8 2e       	mov	r14, r24
					UART_SENDSTRING(pass);
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					UART_SENDSTRING("\r\n");
     2a8:	85 ea       	ldi	r24, 0xA5	; 165
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					if (pass == '5')
     2b0:	85 e3       	ldi	r24, 0x35	; 53
     2b2:	e8 12       	cpse	r14, r24
     2b4:	57 c0       	rjmp	.+174    	; 0x364 <main+0x2b2>
					{
						UART_SENDSTRING("enter third digit");
     2b6:	84 ef       	ldi	r24, 0xF4	; 244
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						pass = UART_Received();
     2be:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
     2c2:	e8 2e       	mov	r14, r24
						UART_SENDSTRING(pass);
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("\r\n");
     2ca:	85 ea       	ldi	r24, 0xA5	; 165
     2cc:	92 e0       	ldi	r25, 0x02	; 2
     2ce:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						if (pass == '6')
     2d2:	96 e3       	ldi	r25, 0x36	; 54
     2d4:	e9 12       	cpse	r14, r25
     2d6:	40 c0       	rjmp	.+128    	; 0x358 <main+0x2a6>
						{
							UART_SENDSTRING("WELCOME");
     2d8:	86 e0       	ldi	r24, 0x06	; 6
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							LCD_Write_string("Welcome User 2 ");
     2e0:	81 e3       	ldi	r24, 0x31	; 49
     2e2:	92 e0       	ldi	r25, 0x02	; 2
     2e4:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     2e8:	2f ef       	ldi	r18, 0xFF	; 255
     2ea:	82 e5       	ldi	r24, 0x52	; 82
     2ec:	97 e0       	ldi	r25, 0x07	; 7
     2ee:	21 50       	subi	r18, 0x01	; 1
     2f0:	80 40       	sbci	r24, 0x00	; 0
     2f2:	90 40       	sbci	r25, 0x00	; 0
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0x23c>
     2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0x246>
     2f8:	00 00       	nop
							_delay_ms(300);
							LCD_ClearScreen();
     2fa:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
							UART_SENDSTRING("Welcome User2 Home \r\n");
     2fe:	81 e4       	ldi	r24, 0x41	; 65
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("Enter your choice please \r\n");
     306:	84 e3       	ldi	r24, 0x34	; 52
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("1:On/Off light \r\n");
     30e:	80 e5       	ldi	r24, 0x50	; 80
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("2:Temp \r\n");
     316:	82 e6       	ldi	r24, 0x62	; 98
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("3:Open/Close DOOR \r\n");
     31e:	8c e6       	ldi	r24, 0x6C	; 108
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("4:Open Oven \r\n");
     326:	81 e8       	ldi	r24, 0x81	; 129
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("5:Close Oven \r\n");
     32e:	80 e9       	ldi	r24, 0x90	; 144
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("6:Open Air Conditional \r\n");
     336:	80 ea       	ldi	r24, 0xA0	; 160
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("7:Close Air Conditional \r\n");
     33e:	8a eb       	ldi	r24, 0xBA	; 186
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("8:Open Bathrooms \r\n");
     346:	85 ed       	ldi	r24, 0xD5	; 213
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("9:Open Kitchen \r\n");
     34e:	89 ee       	ldi	r24, 0xE9	; 233
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
     356:	96 c3       	rjmp	.+1836   	; 0xa84 <__stack+0x225>
							flag = 1 ;
						}
						else
						{
							UART_SENDSTRING("NOO");
     358:	8b ef       	ldi	r24, 0xFB	; 251
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							count -- ;
     360:	d1 50       	subi	r29, 0x01	; 1
     362:	90 c0       	rjmp	.+288    	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
						}
					}
					else
					{
						UART_SENDSTRING("NOO");
     364:	8b ef       	ldi	r24, 0xFB	; 251
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						count -- ;
     36c:	d1 50       	subi	r29, 0x01	; 1
     36e:	8a c0       	rjmp	.+276    	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
					}
				}
				else
				{
					UART_SENDSTRING("NOO");
     370:	8b ef       	ldi	r24, 0xFB	; 251
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					count -- ;
     378:	d1 50       	subi	r29, 0x01	; 1
     37a:	84 c0       	rjmp	.+264    	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
				}
			break;
			case '3':
				UART_SENDSTRING("welcome Admin enter your password digit by digit");
     37c:	87 e5       	ldi	r24, 0x57	; 87
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
				pass = UART_Received();
     384:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
     388:	e8 2e       	mov	r14, r24
				UART_SENDSTRING(pass);
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
				UART_SENDSTRING("\r\n");
     390:	85 ea       	ldi	r24, 0xA5	; 165
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
				if (pass == '7')
     398:	27 e3       	ldi	r18, 0x37	; 55
     39a:	e2 12       	cpse	r14, r18
     39c:	6e c0       	rjmp	.+220    	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
				{
					UART_SENDSTRING("enter second digit");
     39e:	81 ee       	ldi	r24, 0xE1	; 225
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					pass = UART_Received();
     3a6:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
     3aa:	e8 2e       	mov	r14, r24
					UART_SENDSTRING(pass);
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					UART_SENDSTRING("\r\n");
     3b2:	85 ea       	ldi	r24, 0xA5	; 165
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					if (pass == '8')
     3ba:	88 e3       	ldi	r24, 0x38	; 56
     3bc:	e8 12       	cpse	r14, r24
     3be:	57 c0       	rjmp	.+174    	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
					{
						UART_SENDSTRING("enter third digit \r\n");
     3c0:	88 e8       	ldi	r24, 0x88	; 136
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						pass = UART_Received();
     3c8:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
     3cc:	e8 2e       	mov	r14, r24
						UART_SENDSTRING(pass);
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						UART_SENDSTRING("\r\n");
     3d4:	85 ea       	ldi	r24, 0xA5	; 165
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						if (pass == '9')
     3dc:	99 e3       	ldi	r25, 0x39	; 57
     3de:	e9 12       	cpse	r14, r25
     3e0:	40 c0       	rjmp	.+128    	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
						{
							UART_SENDSTRING("WELCOME \r\n");
     3e2:	8d e9       	ldi	r24, 0x9D	; 157
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							LCD_Write_string("Welcome ADMIN ");
     3ea:	88 ea       	ldi	r24, 0xA8	; 168
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	82 e5       	ldi	r24, 0x52	; 82
     3f6:	97 e0       	ldi	r25, 0x07	; 7
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	80 40       	sbci	r24, 0x00	; 0
     3fc:	90 40       	sbci	r25, 0x00	; 0
     3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0x346>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     402:	00 00       	nop
							_delay_ms(300);
							LCD_ClearScreen();
     404:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
							UART_SENDSTRING("Welcome User3 Home \r\n");
     408:	87 eb       	ldi	r24, 0xB7	; 183
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("Enter your choice please \r\n");
     410:	84 e3       	ldi	r24, 0x34	; 52
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("1:On/Off lights \r\n");
     418:	8d ec       	ldi	r24, 0xCD	; 205
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("2:Temps \r\n");
     420:	80 ee       	ldi	r24, 0xE0	; 224
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("3:Open/Close DOORs \r\n");
     428:	8b ee       	ldi	r24, 0xEB	; 235
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("4:Open Oven \r\n");
     430:	81 e8       	ldi	r24, 0x81	; 129
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("5:Close Oven \r\n");
     438:	80 e9       	ldi	r24, 0x90	; 144
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("6:Open Air Conditional \r\n");
     440:	80 ea       	ldi	r24, 0xA0	; 160
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("7:Close Air Conditional \r\n");	
     448:	8a eb       	ldi	r24, 0xBA	; 186
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("8:Open Bathrooms \r\n");
     450:	85 ed       	ldi	r24, 0xD5	; 213
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							UART_SENDSTRING("9:Open Kitchen \r\n");
     458:	89 ee       	ldi	r24, 0xE9	; 233
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
     460:	11 c3       	rjmp	.+1570   	; 0xa84 <__stack+0x225>
							flag = 1 ;
						}	
						else
						{
							UART_SENDSTRING("NOO");
     462:	8b ef       	ldi	r24, 0xFB	; 251
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
							count -- ;
     46a:	d1 50       	subi	r29, 0x01	; 1
     46c:	0b c0       	rjmp	.+22     	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
						}
					}
					else
					{
						UART_SENDSTRING("NOO");
     46e:	8b ef       	ldi	r24, 0xFB	; 251
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
						count -- ;
     476:	d1 50       	subi	r29, 0x01	; 1
     478:	05 c0       	rjmp	.+10     	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
					}
					
				}
				else
				{
					UART_SENDSTRING("NOO");
     47a:	8b ef       	ldi	r24, 0xFB	; 251
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
					count -- ;
     482:	d1 50       	subi	r29, 0x01	; 1
				}
			break;
			default:
			break;
		}
		if (count == 0) /*If the User Entered the Password Wrong 3 Times*/
     484:	d1 11       	cpse	r29, r1
     486:	1f c0       	rjmp	.+62     	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
     488:	01 c0       	rjmp	.+2      	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
     48a:	0f 2d       	mov	r16, r15
		{ 
			/*Closing The system and Requires to Restart it Again*/
			UART_SENDSTRING("blocked \r\n");
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SENDSTRING>
			DIO_SETPIN_VALUE(DIO_PORTD,DIO_PIN0,DIO_LOW);
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
			DIO_SETPIN_VALUE(DIO_PORTD,DIO_PIN1,DIO_LOW);
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	6f 2d       	mov	r22, r15
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
			BUZZER_ON();
     4a8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <BUZZER_ON>
     4ac:	2f ef       	ldi	r18, 0xFF	; 255
     4ae:	8d e3       	ldi	r24, 0x3D	; 61
     4b0:	99 e4       	ldi	r25, 0x49	; 73
     4b2:	21 50       	subi	r18, 0x01	; 1
     4b4:	80 40       	sbci	r24, 0x00	; 0
     4b6:	90 40       	sbci	r25, 0x00	; 0
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
     4bc:	00 00       	nop
			_delay_ms(3000);
			BUZZER_OFF();
     4be:	0e 94 cc 05 	call	0xb98	; 0xb98 <BUZZER_OFF>
     4c2:	d0 e0       	ldi	r29, 0x00	; 0
			enter_system=0;
     4c4:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (flag == 1)
     4c6:	01 30       	cpi	r16, 0x01	; 1
     4c8:	09 f0       	breq	.+2      	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
     4ca:	45 ce       	rjmp	.-886    	; 0x156 <main+0xa4>
		{
			break;
		}
	}
	/*Enter The Smart Home Successfully*/
	while (enter_system == 1)
     4cc:	11 30       	cpi	r17, 0x01	; 1
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
     4d0:	dc c2       	rjmp	.+1464   	; 0xa8a <__stack+0x22b>
	{
		LCD_ClearScreen();
     4d2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
		LCD_Write_string("WELCOME TO SYSTEM");
     4d6:	8c e0       	ldi	r24, 0x0C	; 12
     4d8:	93 e0       	ldi	r25, 0x03	; 3
     4da:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     4de:	2f ef       	ldi	r18, 0xFF	; 255
     4e0:	82 e5       	ldi	r24, 0x52	; 82
     4e2:	97 e0       	ldi	r25, 0x07	; 7
     4e4:	21 50       	subi	r18, 0x01	; 1
     4e6:	80 40       	sbci	r24, 0x00	; 0
     4e8:	90 40       	sbci	r25, 0x00	; 0
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <__FUSE_REGION_LENGTH__+0xe4>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>
     4ee:	00 00       	nop
		_delay_ms(300);
		LCD_ClearScreen();
     4f0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
		switch(user_id)
     4f4:	c2 33       	cpi	r28, 0x32	; 50
     4f6:	09 f4       	brne	.+2      	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
     4f8:	0c c1       	rjmp	.+536    	; 0x712 <__FUSE_REGION_LENGTH__+0x312>
     4fa:	c3 33       	cpi	r28, 0x33	; 51
     4fc:	09 f4       	brne	.+2      	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
     4fe:	10 c2       	rjmp	.+1056   	; 0x920 <__stack+0xc1>
     500:	c1 33       	cpi	r28, 0x31	; 49
     502:	39 f7       	brne	.-50     	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
		{
			case  '1':
			data = UART_Received();
     504:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
				if (data == '1')
     508:	81 33       	cpi	r24, 0x31	; 49
     50a:	91 f4       	brne	.+36     	; 0x530 <__FUSE_REGION_LENGTH__+0x130>
				{
					LED0_TGL();
     50c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <LED0_TGL>
					LCD_ClearScreen();
     510:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
					LCD_Write_string("LED 1 toggled");
     514:	8e e1       	ldi	r24, 0x1E	; 30
     516:	93 e0       	ldi	r25, 0x03	; 3
     518:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     51c:	2f ef       	ldi	r18, 0xFF	; 255
     51e:	82 e5       	ldi	r24, 0x52	; 82
     520:	97 e0       	ldi	r25, 0x07	; 7
     522:	21 50       	subi	r18, 0x01	; 1
     524:	80 40       	sbci	r24, 0x00	; 0
     526:	90 40       	sbci	r25, 0x00	; 0
     528:	e1 f7       	brne	.-8      	; 0x522 <__FUSE_REGION_LENGTH__+0x122>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <__FUSE_REGION_LENGTH__+0x12c>
     52c:	00 00       	nop
     52e:	d1 cf       	rjmp	.-94     	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
					_delay_ms(300);
				}
				else if (data == '2')
     530:	82 33       	cpi	r24, 0x32	; 50
     532:	31 f5       	brne	.+76     	; 0x580 <__FUSE_REGION_LENGTH__+0x180>
				{
				temp=First_LM35_read();
     534:	0e 94 63 07 	call	0xec6	; 0xec6 <First_LM35_read>
     538:	8c 01       	movw	r16, r24
				LCD_Write_string("Temp Room1 is :");
     53a:	8c e2       	ldi	r24, 0x2C	; 44
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
				LCD_Write_Command(0XC0);
     542:	80 ec       	ldi	r24, 0xC0	; 192
     544:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
					LCD_Write_Number(temp/10);
     548:	98 01       	movw	r18, r16
     54a:	ad ec       	ldi	r26, 0xCD	; 205
     54c:	bc ec       	ldi	r27, 0xCC	; 204
     54e:	0e 94 9e 09 	call	0x133c	; 0x133c <__umulhisi3>
     552:	96 95       	lsr	r25
     554:	87 95       	ror	r24
     556:	96 95       	lsr	r25
     558:	87 95       	ror	r24
     55a:	96 95       	lsr	r25
     55c:	87 95       	ror	r24
     55e:	bc 01       	movw	r22, r24
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 1f 07 	call	0xe3e	; 0xe3e <LCD_Write_Number>
     568:	2f ef       	ldi	r18, 0xFF	; 255
     56a:	8d e3       	ldi	r24, 0x3D	; 61
     56c:	99 e4       	ldi	r25, 0x49	; 73
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	80 40       	sbci	r24, 0x00	; 0
     572:	90 40       	sbci	r25, 0x00	; 0
     574:	e1 f7       	brne	.-8      	; 0x56e <__FUSE_REGION_LENGTH__+0x16e>
     576:	00 c0       	rjmp	.+0      	; 0x578 <__FUSE_REGION_LENGTH__+0x178>
     578:	00 00       	nop
					_delay_ms(3000);
					LCD_ClearScreen();
     57a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     57e:	a9 cf       	rjmp	.-174    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
				}
				else if (data == '3') 
     580:	83 33       	cpi	r24, 0x33	; 51
     582:	01 f5       	brne	.+64     	; 0x5c4 <__FUSE_REGION_LENGTH__+0x1c4>
				{					
						
					Motor_ON(clockwise, enable1);
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Motor_ON>
     58c:	2f ef       	ldi	r18, 0xFF	; 255
     58e:	8d e3       	ldi	r24, 0x3D	; 61
     590:	99 e4       	ldi	r25, 0x49	; 73
     592:	21 50       	subi	r18, 0x01	; 1
     594:	80 40       	sbci	r24, 0x00	; 0
     596:	90 40       	sbci	r25, 0x00	; 0
     598:	e1 f7       	brne	.-8      	; 0x592 <__FUSE_REGION_LENGTH__+0x192>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <__FUSE_REGION_LENGTH__+0x19c>
     59c:	00 00       	nop
					_delay_ms(3000);
					Motor_OFF(enable1);
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <Motor_OFF>
					LCD_Write_string("DOOR 1 :");
     5a4:	8c e3       	ldi	r24, 0x3C	; 60
     5a6:	93 e0       	ldi	r25, 0x03	; 3
     5a8:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     5ac:	2f ef       	ldi	r18, 0xFF	; 255
     5ae:	8d e3       	ldi	r24, 0x3D	; 61
     5b0:	99 e4       	ldi	r25, 0x49	; 73
     5b2:	21 50       	subi	r18, 0x01	; 1
     5b4:	80 40       	sbci	r24, 0x00	; 0
     5b6:	90 40       	sbci	r25, 0x00	; 0
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <__FUSE_REGION_LENGTH__+0x1b2>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <__FUSE_REGION_LENGTH__+0x1bc>
     5bc:	00 00       	nop
					_delay_ms(3000);
					LCD_ClearScreen();
     5be:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     5c2:	87 cf       	rjmp	.-242    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
				}
				else if (data == '4')
     5c4:	84 33       	cpi	r24, 0x34	; 52
     5c6:	d1 f4       	brne	.+52     	; 0x5fc <__FUSE_REGION_LENGTH__+0x1fc>
				{
					DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN2 ,DIO_OUTPUT);
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	62 e0       	ldi	r22, 0x02	; 2
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
					DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN2 , DIO_HIGH);
     5d2:	41 e0       	ldi	r20, 0x01	; 1
     5d4:	62 e0       	ldi	r22, 0x02	; 2
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
					LCD_Write_string("Heater On");
     5dc:	85 e4       	ldi	r24, 0x45	; 69
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     5e4:	2f ef       	ldi	r18, 0xFF	; 255
     5e6:	8d e3       	ldi	r24, 0x3D	; 61
     5e8:	99 e4       	ldi	r25, 0x49	; 73
     5ea:	21 50       	subi	r18, 0x01	; 1
     5ec:	80 40       	sbci	r24, 0x00	; 0
     5ee:	90 40       	sbci	r25, 0x00	; 0
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <__FUSE_REGION_LENGTH__+0x1ea>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <__FUSE_REGION_LENGTH__+0x1f4>
     5f4:	00 00       	nop
					_delay_ms(3000);
					LCD_ClearScreen();
     5f6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     5fa:	6b cf       	rjmp	.-298    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
				}
				else if (data == '5')
     5fc:	85 33       	cpi	r24, 0x35	; 53
     5fe:	d1 f4       	brne	.+52     	; 0x634 <__FUSE_REGION_LENGTH__+0x234>
				{
					DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN2 ,DIO_OUTPUT);
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	62 e0       	ldi	r22, 0x02	; 2
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
					DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN2 , DIO_LOW);
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
					LCD_Write_string("Heater Off");
     614:	8f e4       	ldi	r24, 0x4F	; 79
     616:	93 e0       	ldi	r25, 0x03	; 3
     618:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     61c:	2f ef       	ldi	r18, 0xFF	; 255
     61e:	8d e3       	ldi	r24, 0x3D	; 61
     620:	99 e4       	ldi	r25, 0x49	; 73
     622:	21 50       	subi	r18, 0x01	; 1
     624:	80 40       	sbci	r24, 0x00	; 0
     626:	90 40       	sbci	r25, 0x00	; 0
     628:	e1 f7       	brne	.-8      	; 0x622 <__FUSE_REGION_LENGTH__+0x222>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <__FUSE_REGION_LENGTH__+0x22c>
     62c:	00 00       	nop
					_delay_ms(3000);
					LCD_ClearScreen();
     62e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     632:	4f cf       	rjmp	.-354    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
				}
				else if (data == '6')
     634:	86 33       	cpi	r24, 0x36	; 54
     636:	d1 f4       	brne	.+52     	; 0x66c <__FUSE_REGION_LENGTH__+0x26c>
				{
					DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN3 ,DIO_OUTPUT);
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	63 e0       	ldi	r22, 0x03	; 3
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
					DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN3 , DIO_HIGH);
     642:	41 e0       	ldi	r20, 0x01	; 1
     644:	63 e0       	ldi	r22, 0x03	; 3
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
					LCD_Write_string("AIR CONDITIONAL ON");
     64c:	8a e5       	ldi	r24, 0x5A	; 90
     64e:	93 e0       	ldi	r25, 0x03	; 3
     650:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     654:	2f ef       	ldi	r18, 0xFF	; 255
     656:	8d e3       	ldi	r24, 0x3D	; 61
     658:	99 e4       	ldi	r25, 0x49	; 73
     65a:	21 50       	subi	r18, 0x01	; 1
     65c:	80 40       	sbci	r24, 0x00	; 0
     65e:	90 40       	sbci	r25, 0x00	; 0
     660:	e1 f7       	brne	.-8      	; 0x65a <__FUSE_REGION_LENGTH__+0x25a>
     662:	00 c0       	rjmp	.+0      	; 0x664 <__FUSE_REGION_LENGTH__+0x264>
     664:	00 00       	nop
					_delay_ms(3000);
					LCD_ClearScreen();
     666:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     66a:	33 cf       	rjmp	.-410    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
				}
				else if (data == '7')
     66c:	87 33       	cpi	r24, 0x37	; 55
     66e:	d1 f4       	brne	.+52     	; 0x6a4 <__FUSE_REGION_LENGTH__+0x2a4>
				{
					DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN3 ,DIO_OUTPUT);
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	63 e0       	ldi	r22, 0x03	; 3
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
					DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN3 , DIO_LOW);
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	63 e0       	ldi	r22, 0x03	; 3
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
					LCD_Write_string("AIR CONDITIONAL  Off");
     684:	8d e6       	ldi	r24, 0x6D	; 109
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     68c:	2f ef       	ldi	r18, 0xFF	; 255
     68e:	8d e3       	ldi	r24, 0x3D	; 61
     690:	99 e4       	ldi	r25, 0x49	; 73
     692:	21 50       	subi	r18, 0x01	; 1
     694:	80 40       	sbci	r24, 0x00	; 0
     696:	90 40       	sbci	r25, 0x00	; 0
     698:	e1 f7       	brne	.-8      	; 0x692 <__FUSE_REGION_LENGTH__+0x292>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <__FUSE_REGION_LENGTH__+0x29c>
     69c:	00 00       	nop
					_delay_ms(3000);
					LCD_ClearScreen();
     69e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     6a2:	17 cf       	rjmp	.-466    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
				}
				else if (data == '8')
     6a4:	88 33       	cpi	r24, 0x38	; 56
     6a6:	c9 f4       	brne	.+50     	; 0x6da <__FUSE_REGION_LENGTH__+0x2da>
				{
					DIO_SETPIN_DIRECTION(DIO_PORTC,DIO_PIN7,DIO_OUTPUT);
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	67 e0       	ldi	r22, 0x07	; 7
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
					DIO_TOGPIN_VALUE(DIO_PORTC,DIO_PIN7);
     6b2:	67 e0       	ldi	r22, 0x07	; 7
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_TOGPIN_VALUE>
					LCD_Write_string("Bathroom TGL");
     6ba:	82 e8       	ldi	r24, 0x82	; 130
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     6c2:	2f ef       	ldi	r18, 0xFF	; 255
     6c4:	8d e3       	ldi	r24, 0x3D	; 61
     6c6:	99 e4       	ldi	r25, 0x49	; 73
     6c8:	21 50       	subi	r18, 0x01	; 1
     6ca:	80 40       	sbci	r24, 0x00	; 0
     6cc:	90 40       	sbci	r25, 0x00	; 0
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <__FUSE_REGION_LENGTH__+0x2c8>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <__FUSE_REGION_LENGTH__+0x2d2>
     6d2:	00 00       	nop
					_delay_ms(3000);
					LCD_ClearScreen();
     6d4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     6d8:	fc ce       	rjmp	.-520    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
				}
				else if ( data ==  '9')
     6da:	89 33       	cpi	r24, 0x39	; 57
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <__FUSE_REGION_LENGTH__+0x2e0>
     6de:	f9 ce       	rjmp	.-526    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
				{
					DIO_SETPIN_DIRECTION(DIO_PORTC,DIO_PIN6,DIO_OUTPUT);
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	66 e0       	ldi	r22, 0x06	; 6
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
					DIO_TOGPIN_VALUE(DIO_PORTC,DIO_PIN6);
     6ea:	66 e0       	ldi	r22, 0x06	; 6
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_TOGPIN_VALUE>
					LCD_Write_string("Kitchen TGL");
     6f2:	8f e8       	ldi	r24, 0x8F	; 143
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     6fa:	2f ef       	ldi	r18, 0xFF	; 255
     6fc:	8d e3       	ldi	r24, 0x3D	; 61
     6fe:	99 e4       	ldi	r25, 0x49	; 73
     700:	21 50       	subi	r18, 0x01	; 1
     702:	80 40       	sbci	r24, 0x00	; 0
     704:	90 40       	sbci	r25, 0x00	; 0
     706:	e1 f7       	brne	.-8      	; 0x700 <__FUSE_REGION_LENGTH__+0x300>
     708:	00 c0       	rjmp	.+0      	; 0x70a <__FUSE_REGION_LENGTH__+0x30a>
     70a:	00 00       	nop
					_delay_ms(3000);
					LCD_ClearScreen();
     70c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     710:	e0 ce       	rjmp	.-576    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
				}
			break;
			case  '2':
					data = UART_Received();
     712:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
					if (data == '1')
     716:	81 33       	cpi	r24, 0x31	; 49
     718:	91 f4       	brne	.+36     	; 0x73e <__FUSE_REGION_LENGTH__+0x33e>
					{
						LED1_TGL();
     71a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <LED1_TGL>
						LCD_ClearScreen();
     71e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
						LCD_Write_string("LED 2 toggled");
     722:	8b e9       	ldi	r24, 0x9B	; 155
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     72a:	2f ef       	ldi	r18, 0xFF	; 255
     72c:	82 e5       	ldi	r24, 0x52	; 82
     72e:	97 e0       	ldi	r25, 0x07	; 7
     730:	21 50       	subi	r18, 0x01	; 1
     732:	80 40       	sbci	r24, 0x00	; 0
     734:	90 40       	sbci	r25, 0x00	; 0
     736:	e1 f7       	brne	.-8      	; 0x730 <__FUSE_REGION_LENGTH__+0x330>
     738:	00 c0       	rjmp	.+0      	; 0x73a <__FUSE_REGION_LENGTH__+0x33a>
     73a:	00 00       	nop
     73c:	ca ce       	rjmp	.-620    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
						_delay_ms(300);
					}
					else if (data == '2')
     73e:	82 33       	cpi	r24, 0x32	; 50
     740:	31 f5       	brne	.+76     	; 0x78e <__FUSE_REGION_LENGTH__+0x38e>
					{
						temp=Second_LM35_read();
     742:	0e 94 77 07 	call	0xeee	; 0xeee <Second_LM35_read>
     746:	8c 01       	movw	r16, r24
						LCD_Write_string("Temp Room2 is :");
     748:	89 ea       	ldi	r24, 0xA9	; 169
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
						LCD_Write_Command(0XC0);
     750:	80 ec       	ldi	r24, 0xC0	; 192
     752:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
						LCD_Write_Number(temp/10);
     756:	98 01       	movw	r18, r16
     758:	ad ec       	ldi	r26, 0xCD	; 205
     75a:	bc ec       	ldi	r27, 0xCC	; 204
     75c:	0e 94 9e 09 	call	0x133c	; 0x133c <__umulhisi3>
     760:	96 95       	lsr	r25
     762:	87 95       	ror	r24
     764:	96 95       	lsr	r25
     766:	87 95       	ror	r24
     768:	96 95       	lsr	r25
     76a:	87 95       	ror	r24
     76c:	bc 01       	movw	r22, r24
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 1f 07 	call	0xe3e	; 0xe3e <LCD_Write_Number>
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	8d e3       	ldi	r24, 0x3D	; 61
     77a:	99 e4       	ldi	r25, 0x49	; 73
     77c:	21 50       	subi	r18, 0x01	; 1
     77e:	80 40       	sbci	r24, 0x00	; 0
     780:	90 40       	sbci	r25, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <__FUSE_REGION_LENGTH__+0x37c>
     784:	00 c0       	rjmp	.+0      	; 0x786 <__FUSE_REGION_LENGTH__+0x386>
     786:	00 00       	nop
						_delay_ms(3000);
						LCD_ClearScreen();
     788:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     78c:	a2 ce       	rjmp	.-700    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
					}
					else if (data == '3')
     78e:	83 33       	cpi	r24, 0x33	; 51
     790:	01 f5       	brne	.+64     	; 0x7d2 <__FUSE_REGION_LENGTH__+0x3d2>
					{
						Motor_ON(clockwise, enable2);
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Motor_ON>
     79a:	2f ef       	ldi	r18, 0xFF	; 255
     79c:	8d e3       	ldi	r24, 0x3D	; 61
     79e:	99 e4       	ldi	r25, 0x49	; 73
     7a0:	21 50       	subi	r18, 0x01	; 1
     7a2:	80 40       	sbci	r24, 0x00	; 0
     7a4:	90 40       	sbci	r25, 0x00	; 0
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <__FUSE_REGION_LENGTH__+0x3a0>
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <__FUSE_REGION_LENGTH__+0x3aa>
     7aa:	00 00       	nop
						_delay_ms(3000);
						Motor_OFF(enable2);
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	0e 94 3d 06 	call	0xc7a	; 0xc7a <Motor_OFF>
						LCD_Write_string("DOOR 2 :");
     7b2:	89 eb       	ldi	r24, 0xB9	; 185
     7b4:	93 e0       	ldi	r25, 0x03	; 3
     7b6:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     7ba:	2f ef       	ldi	r18, 0xFF	; 255
     7bc:	8d e3       	ldi	r24, 0x3D	; 61
     7be:	99 e4       	ldi	r25, 0x49	; 73
     7c0:	21 50       	subi	r18, 0x01	; 1
     7c2:	80 40       	sbci	r24, 0x00	; 0
     7c4:	90 40       	sbci	r25, 0x00	; 0
     7c6:	e1 f7       	brne	.-8      	; 0x7c0 <__FUSE_REGION_LENGTH__+0x3c0>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <__FUSE_REGION_LENGTH__+0x3ca>
     7ca:	00 00       	nop
						_delay_ms(3000);
						LCD_ClearScreen();
     7cc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     7d0:	80 ce       	rjmp	.-768    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
					}
					else if (data == '4')
     7d2:	84 33       	cpi	r24, 0x34	; 52
     7d4:	d1 f4       	brne	.+52     	; 0x80a <__FUSE_REGION_LENGTH__+0x40a>
					{
						DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN2 ,DIO_OUTPUT);
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	62 e0       	ldi	r22, 0x02	; 2
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
						DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN2 , DIO_HIGH);
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	62 e0       	ldi	r22, 0x02	; 2
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
						LCD_Write_string("Heater On");
     7ea:	85 e4       	ldi	r24, 0x45	; 69
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     7f2:	2f ef       	ldi	r18, 0xFF	; 255
     7f4:	8d e3       	ldi	r24, 0x3D	; 61
     7f6:	99 e4       	ldi	r25, 0x49	; 73
     7f8:	21 50       	subi	r18, 0x01	; 1
     7fa:	80 40       	sbci	r24, 0x00	; 0
     7fc:	90 40       	sbci	r25, 0x00	; 0
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <__FUSE_REGION_LENGTH__+0x3f8>
     800:	00 c0       	rjmp	.+0      	; 0x802 <__FUSE_REGION_LENGTH__+0x402>
     802:	00 00       	nop
						_delay_ms(3000);
						LCD_ClearScreen();
     804:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     808:	64 ce       	rjmp	.-824    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
					}
					else if (data == '5')
     80a:	85 33       	cpi	r24, 0x35	; 53
     80c:	d1 f4       	brne	.+52     	; 0x842 <__FUSE_REGION_LENGTH__+0x442>
					{
						DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN2 ,DIO_OUTPUT);
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
						DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN2 , DIO_LOW);
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	62 e0       	ldi	r22, 0x02	; 2
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
						LCD_Write_string("Heater Off");
     822:	8f e4       	ldi	r24, 0x4F	; 79
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     82a:	2f ef       	ldi	r18, 0xFF	; 255
     82c:	8d e3       	ldi	r24, 0x3D	; 61
     82e:	99 e4       	ldi	r25, 0x49	; 73
     830:	21 50       	subi	r18, 0x01	; 1
     832:	80 40       	sbci	r24, 0x00	; 0
     834:	90 40       	sbci	r25, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <__FUSE_REGION_LENGTH__+0x430>
     838:	00 c0       	rjmp	.+0      	; 0x83a <__FUSE_REGION_LENGTH__+0x43a>
     83a:	00 00       	nop
						_delay_ms(3000);
						LCD_ClearScreen();
     83c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     840:	48 ce       	rjmp	.-880    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
					}
					else if (data == '6')
     842:	86 33       	cpi	r24, 0x36	; 54
     844:	d1 f4       	brne	.+52     	; 0x87a <__stack+0x1b>
					{
						DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN3 ,DIO_OUTPUT);
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	63 e0       	ldi	r22, 0x03	; 3
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
						DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN3 , DIO_HIGH);
     850:	41 e0       	ldi	r20, 0x01	; 1
     852:	63 e0       	ldi	r22, 0x03	; 3
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
						LCD_Write_string("AIR CONDITIONAL ON");
     85a:	8a e5       	ldi	r24, 0x5A	; 90
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     862:	2f ef       	ldi	r18, 0xFF	; 255
     864:	8d e3       	ldi	r24, 0x3D	; 61
     866:	99 e4       	ldi	r25, 0x49	; 73
     868:	21 50       	subi	r18, 0x01	; 1
     86a:	80 40       	sbci	r24, 0x00	; 0
     86c:	90 40       	sbci	r25, 0x00	; 0
     86e:	e1 f7       	brne	.-8      	; 0x868 <__stack+0x9>
     870:	00 c0       	rjmp	.+0      	; 0x872 <__stack+0x13>
     872:	00 00       	nop
						_delay_ms(3000);
						LCD_ClearScreen();
     874:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     878:	2c ce       	rjmp	.-936    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
					}
					
					else if (data == '7')
     87a:	87 33       	cpi	r24, 0x37	; 55
     87c:	d1 f4       	brne	.+52     	; 0x8b2 <__stack+0x53>
					{
						DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN3 ,DIO_OUTPUT);
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	63 e0       	ldi	r22, 0x03	; 3
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
						DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN3 , DIO_LOW);
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	63 e0       	ldi	r22, 0x03	; 3
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
						LCD_Write_string("AIR CONDITIONAL OFF");
     892:	82 ec       	ldi	r24, 0xC2	; 194
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     89a:	2f ef       	ldi	r18, 0xFF	; 255
     89c:	8d e3       	ldi	r24, 0x3D	; 61
     89e:	99 e4       	ldi	r25, 0x49	; 73
     8a0:	21 50       	subi	r18, 0x01	; 1
     8a2:	80 40       	sbci	r24, 0x00	; 0
     8a4:	90 40       	sbci	r25, 0x00	; 0
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <__stack+0x41>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <__stack+0x4b>
     8aa:	00 00       	nop
						_delay_ms(3000);
						LCD_ClearScreen();
     8ac:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     8b0:	10 ce       	rjmp	.-992    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
					}
					
					else if (data == '8')
     8b2:	88 33       	cpi	r24, 0x38	; 56
     8b4:	c9 f4       	brne	.+50     	; 0x8e8 <__stack+0x89>
					{
						DIO_SETPIN_DIRECTION(DIO_PORTC,DIO_PIN7,DIO_OUTPUT);
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	67 e0       	ldi	r22, 0x07	; 7
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
						DIO_TOGPIN_VALUE(DIO_PORTC,DIO_PIN7);
     8c0:	67 e0       	ldi	r22, 0x07	; 7
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_TOGPIN_VALUE>
						LCD_Write_string("Bathroom TGL");
     8c8:	82 e8       	ldi	r24, 0x82	; 130
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     8d0:	2f ef       	ldi	r18, 0xFF	; 255
     8d2:	8d e3       	ldi	r24, 0x3D	; 61
     8d4:	99 e4       	ldi	r25, 0x49	; 73
     8d6:	21 50       	subi	r18, 0x01	; 1
     8d8:	80 40       	sbci	r24, 0x00	; 0
     8da:	90 40       	sbci	r25, 0x00	; 0
     8dc:	e1 f7       	brne	.-8      	; 0x8d6 <__stack+0x77>
     8de:	00 c0       	rjmp	.+0      	; 0x8e0 <__stack+0x81>
     8e0:	00 00       	nop
						_delay_ms(3000);
						LCD_ClearScreen();
     8e2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     8e6:	f5 cd       	rjmp	.-1046   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
					}
					else if ( data ==  '9')
     8e8:	89 33       	cpi	r24, 0x39	; 57
     8ea:	09 f0       	breq	.+2      	; 0x8ee <__stack+0x8f>
     8ec:	f2 cd       	rjmp	.-1052   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
					{
						DIO_SETPIN_DIRECTION(DIO_PORTC,DIO_PIN6,DIO_OUTPUT);
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	66 e0       	ldi	r22, 0x06	; 6
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
						DIO_TOGPIN_VALUE(DIO_PORTC,DIO_PIN6);
     8f8:	66 e0       	ldi	r22, 0x06	; 6
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_TOGPIN_VALUE>
						LCD_Write_string("Kitchen TGL");
     900:	8f e8       	ldi	r24, 0x8F	; 143
     902:	93 e0       	ldi	r25, 0x03	; 3
     904:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     908:	2f ef       	ldi	r18, 0xFF	; 255
     90a:	8d e3       	ldi	r24, 0x3D	; 61
     90c:	99 e4       	ldi	r25, 0x49	; 73
     90e:	21 50       	subi	r18, 0x01	; 1
     910:	80 40       	sbci	r24, 0x00	; 0
     912:	90 40       	sbci	r25, 0x00	; 0
     914:	e1 f7       	brne	.-8      	; 0x90e <__stack+0xaf>
     916:	00 c0       	rjmp	.+0      	; 0x918 <__stack+0xb9>
     918:	00 00       	nop
						_delay_ms(3000);
						LCD_ClearScreen();
     91a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     91e:	d9 cd       	rjmp	.-1102   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
					}
			break;
			case '3':
			data = UART_Received();
     920:	0e 94 84 09 	call	0x1308	; 0x1308 <UART_Received>
			if (data == '1')
     924:	81 33       	cpi	r24, 0x31	; 49
     926:	69 f4       	brne	.+26     	; 0x942 <__stack+0xe3>
			{
				
					LED1_TGL();
     928:	0e 94 58 07 	call	0xeb0	; 0xeb0 <LED1_TGL>
					LED0_TGL();
     92c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <LED0_TGL>
					DIO_TOGPIN_VALUE(DIO_PORTC,DIO_PIN6);
     930:	66 e0       	ldi	r22, 0x06	; 6
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_TOGPIN_VALUE>
					DIO_TOGPIN_VALUE(DIO_PORTC,DIO_PIN7);
     938:	67 e0       	ldi	r22, 0x07	; 7
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_TOGPIN_VALUE>
     940:	c8 cd       	rjmp	.-1136   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
			}
			else if (data =='2')
     942:	82 33       	cpi	r24, 0x32	; 50
     944:	c1 f5       	brne	.+112    	; 0x9b6 <__stack+0x157>
			{
					uint16_t temp1 , temp2;
					temp1=First_LM35_read();
     946:	0e 94 63 07 	call	0xec6	; 0xec6 <First_LM35_read>
     94a:	7c 01       	movw	r14, r24
					temp2=Second_LM35_read();
     94c:	0e 94 77 07 	call	0xeee	; 0xeee <Second_LM35_read>
     950:	8c 01       	movw	r16, r24
					LCD_Write_Command(0X84);
     952:	84 e8       	ldi	r24, 0x84	; 132
     954:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
					LCD_Write_Number(temp1/10);
     958:	97 01       	movw	r18, r14
     95a:	ad ec       	ldi	r26, 0xCD	; 205
     95c:	bc ec       	ldi	r27, 0xCC	; 204
     95e:	0e 94 9e 09 	call	0x133c	; 0x133c <__umulhisi3>
     962:	96 95       	lsr	r25
     964:	87 95       	ror	r24
     966:	96 95       	lsr	r25
     968:	87 95       	ror	r24
     96a:	96 95       	lsr	r25
     96c:	87 95       	ror	r24
     96e:	bc 01       	movw	r22, r24
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 1f 07 	call	0xe3e	; 0xe3e <LCD_Write_Number>
					LCD_Write_Command(0XC0);
     978:	80 ec       	ldi	r24, 0xC0	; 192
     97a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
					LCD_Write_Number(temp2/10);
     97e:	98 01       	movw	r18, r16
     980:	ad ec       	ldi	r26, 0xCD	; 205
     982:	bc ec       	ldi	r27, 0xCC	; 204
     984:	0e 94 9e 09 	call	0x133c	; 0x133c <__umulhisi3>
     988:	96 95       	lsr	r25
     98a:	87 95       	ror	r24
     98c:	96 95       	lsr	r25
     98e:	87 95       	ror	r24
     990:	96 95       	lsr	r25
     992:	87 95       	ror	r24
     994:	bc 01       	movw	r22, r24
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <LCD_Write_Number>
     99e:	2f ef       	ldi	r18, 0xFF	; 255
     9a0:	8d e3       	ldi	r24, 0x3D	; 61
     9a2:	99 e4       	ldi	r25, 0x49	; 73
     9a4:	21 50       	subi	r18, 0x01	; 1
     9a6:	80 40       	sbci	r24, 0x00	; 0
     9a8:	90 40       	sbci	r25, 0x00	; 0
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <__stack+0x145>
     9ac:	00 c0       	rjmp	.+0      	; 0x9ae <__stack+0x14f>
     9ae:	00 00       	nop
					_delay_ms(3000);
					LCD_ClearScreen();
     9b0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_ClearScreen>
     9b4:	8e cd       	rjmp	.-1252   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
			}
			else if (data == '3')
     9b6:	83 33       	cpi	r24, 0x33	; 51
     9b8:	c1 f4       	brne	.+48     	; 0x9ea <__stack+0x18b>
			{
				Motor_ON(clockwise, enable1);
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Motor_ON>
				Motor_ON(clockwise, enable2);
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Motor_ON>
     9ca:	2f ef       	ldi	r18, 0xFF	; 255
     9cc:	8d e3       	ldi	r24, 0x3D	; 61
     9ce:	99 e4       	ldi	r25, 0x49	; 73
     9d0:	21 50       	subi	r18, 0x01	; 1
     9d2:	80 40       	sbci	r24, 0x00	; 0
     9d4:	90 40       	sbci	r25, 0x00	; 0
     9d6:	e1 f7       	brne	.-8      	; 0x9d0 <__stack+0x171>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <__stack+0x17b>
     9da:	00 00       	nop
				_delay_ms(3000);
				Motor_OFF(enable1);
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 3d 06 	call	0xc7a	; 0xc7a <Motor_OFF>
				Motor_OFF(enable2);
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <Motor_OFF>
     9e8:	74 cd       	rjmp	.-1304   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
			}
			else if (data == '4')
     9ea:	84 33       	cpi	r24, 0x34	; 52
     9ec:	59 f4       	brne	.+22     	; 0xa04 <__stack+0x1a5>
			{
				DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN2 ,DIO_OUTPUT);
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	62 e0       	ldi	r22, 0x02	; 2
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
				DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN2 , DIO_HIGH);	
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	62 e0       	ldi	r22, 0x02	; 2
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     a02:	67 cd       	rjmp	.-1330   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
			}
			else if (data == '5')
     a04:	85 33       	cpi	r24, 0x35	; 53
     a06:	59 f4       	brne	.+22     	; 0xa1e <__stack+0x1bf>
			{
				DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN2 ,DIO_OUTPUT);
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	62 e0       	ldi	r22, 0x02	; 2
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
				DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN2 , DIO_LOW);
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	62 e0       	ldi	r22, 0x02	; 2
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     a1c:	5a cd       	rjmp	.-1356   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
			}
			else if (data == '6')
     a1e:	86 33       	cpi	r24, 0x36	; 54
     a20:	59 f4       	brne	.+22     	; 0xa38 <__stack+0x1d9>
			{
				DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN3 ,DIO_OUTPUT);
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	63 e0       	ldi	r22, 0x03	; 3
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
				DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN3 , DIO_HIGH);
     a2c:	41 e0       	ldi	r20, 0x01	; 1
     a2e:	63 e0       	ldi	r22, 0x03	; 3
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     a36:	4d cd       	rjmp	.-1382   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
			}
			else if (data == '7')
     a38:	87 33       	cpi	r24, 0x37	; 55
     a3a:	59 f4       	brne	.+22     	; 0xa52 <__stack+0x1f3>
			{
				DIO_SETPIN_DIRECTION(DIO_PORTC , DIO_PIN3 ,DIO_OUTPUT);
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	63 e0       	ldi	r22, 0x03	; 3
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
				DIO_SETPIN_VALUE(DIO_PORTC , DIO_PIN3 , DIO_LOW);
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	63 e0       	ldi	r22, 0x03	; 3
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     a50:	40 cd       	rjmp	.-1408   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
			}
			else if (data == '8')
     a52:	88 33       	cpi	r24, 0x38	; 56
     a54:	51 f4       	brne	.+20     	; 0xa6a <__stack+0x20b>
			{
				DIO_SETPIN_DIRECTION(DIO_PORTC,DIO_PIN7,DIO_OUTPUT);
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	67 e0       	ldi	r22, 0x07	; 7
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
				DIO_TOGPIN_VALUE(DIO_PORTC,DIO_PIN7);
     a60:	67 e0       	ldi	r22, 0x07	; 7
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_TOGPIN_VALUE>
     a68:	34 cd       	rjmp	.-1432   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
			}
			else if (data == '9')
     a6a:	89 33       	cpi	r24, 0x39	; 57
     a6c:	09 f0       	breq	.+2      	; 0xa70 <__stack+0x211>
     a6e:	31 cd       	rjmp	.-1438   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
			{
				DIO_SETPIN_DIRECTION(DIO_PORTC,DIO_PIN6,DIO_OUTPUT);
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	66 e0       	ldi	r22, 0x06	; 6
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
				DIO_TOGPIN_VALUE(DIO_PORTC,DIO_PIN6);
     a7a:	66 e0       	ldi	r22, 0x06	; 6
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_TOGPIN_VALUE>
     a82:	27 cd       	rjmp	.-1458   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
				}
			break;
			default:
			break;
		}
		if (count == 0) /*If the User Entered the Password Wrong 3 Times*/
     a84:	d1 11       	cpse	r29, r1
     a86:	22 cd       	rjmp	.-1468   	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
     a88:	00 cd       	rjmp	.-1536   	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
				DIO_TOGPIN_VALUE(DIO_PORTC,DIO_PIN6);
			}
			break;
		}
	}	
}
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__vector_1>:
/****************************************************************************************************************/
/************************************************External_Interrupt_(ISR FUNCTION)*******************************/
ISR(INT0_vect)
{
     a9c:	1f 92       	push	r1
     a9e:	0f 92       	push	r0
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	0f 92       	push	r0
     aa4:	11 24       	eor	r1, r1
     aa6:	2f 93       	push	r18
     aa8:	3f 93       	push	r19
     aaa:	4f 93       	push	r20
     aac:	5f 93       	push	r21
     aae:	6f 93       	push	r22
     ab0:	7f 93       	push	r23
     ab2:	8f 93       	push	r24
     ab4:	9f 93       	push	r25
     ab6:	af 93       	push	r26
     ab8:	bf 93       	push	r27
     aba:	ef 93       	push	r30
     abc:	ff 93       	push	r31
	/*This Interrupt Is used For Emergency */
	BUZZER_ON();
     abe:	0e 94 c6 05 	call	0xb8c	; 0xb8c <BUZZER_ON>
	LED2_ON();
     ac2:	0e 94 5d 07 	call	0xeba	; 0xeba <LED2_ON>
     ac6:	2f ef       	ldi	r18, 0xFF	; 255
     ac8:	8d e3       	ldi	r24, 0x3D	; 61
     aca:	99 e4       	ldi	r25, 0x49	; 73
     acc:	21 50       	subi	r18, 0x01	; 1
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	90 40       	sbci	r25, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <__vector_1+0x30>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <__vector_1+0x3a>
     ad6:	00 00       	nop
	_delay_ms(3000);
	LCD_Write_string("Emergency Alarm");
     ad8:	86 ed       	ldi	r24, 0xD6	; 214
     ada:	93 e0       	ldi	r25, 0x03	; 3
     adc:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
	DIO_SETPIN_DIRECTION(DIO_PORTD, DIO_PIN1 , DIO_INPUT);
     ae0:	41 e0       	ldi	r20, 0x01	; 1
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
	DIO_SETPIN_VALUE(DIO_PORTD,DIO_PIN0,DIO_LOW);
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
	DIO_SETPIN_VALUE(DIO_PORTD,DIO_PIN1,DIO_LOW);
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
}
     afe:	ff 91       	pop	r31
     b00:	ef 91       	pop	r30
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	7f 91       	pop	r23
     b0c:	6f 91       	pop	r22
     b0e:	5f 91       	pop	r21
     b10:	4f 91       	pop	r20
     b12:	3f 91       	pop	r19
     b14:	2f 91       	pop	r18
     b16:	0f 90       	pop	r0
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	0f 90       	pop	r0
     b1c:	1f 90       	pop	r1
     b1e:	18 95       	reti

00000b20 <__vector_2>:
ISR (INT1_vect)
{
     b20:	1f 92       	push	r1
     b22:	0f 92       	push	r0
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1
     b2a:	2f 93       	push	r18
     b2c:	3f 93       	push	r19
     b2e:	4f 93       	push	r20
     b30:	5f 93       	push	r21
     b32:	6f 93       	push	r22
     b34:	7f 93       	push	r23
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
     b3a:	af 93       	push	r26
     b3c:	bf 93       	push	r27
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
		/*This Interrupt Is used For Dimmer Circuit to save Power */
	LED0_OFF();
     b42:	0e 94 47 07 	call	0xe8e	; 0xe8e <LED0_OFF>
	LED1_OFF();
     b46:	0e 94 52 07 	call	0xea4	; 0xea4 <LED1_OFF>
	DIO_SETPIN_VALUE(DIO_PORTC,DIO_PIN6 , DIO_LOW);
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	66 e0       	ldi	r22, 0x06	; 6
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
	DIO_SETPIN_VALUE(DIO_PORTC,DIO_PIN7 , DIO_LOW);
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	67 e0       	ldi	r22, 0x07	; 7
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
}
     b5e:	ff 91       	pop	r31
     b60:	ef 91       	pop	r30
     b62:	bf 91       	pop	r27
     b64:	af 91       	pop	r26
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	7f 91       	pop	r23
     b6c:	6f 91       	pop	r22
     b6e:	5f 91       	pop	r21
     b70:	4f 91       	pop	r20
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti

00000b80 <BUZZER_Initialize>:
 */ 
#include "BUZZER_Private.h"

void BUZZER_Initialize(void)
{
	DIO_SETPIN_DIRECTION(BUZZER_PRT,BUZZER,DIO_OUTPUT);
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	65 e0       	ldi	r22, 0x05	; 5
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
     b8a:	08 95       	ret

00000b8c <BUZZER_ON>:
}
void BUZZER_ON(void)
{
	DIO_SETPIN_VALUE(BUZZER_PRT,BUZZER,DIO_HIGH);
     b8c:	41 e0       	ldi	r20, 0x01	; 1
     b8e:	65 e0       	ldi	r22, 0x05	; 5
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     b96:	08 95       	ret

00000b98 <BUZZER_OFF>:
}
void BUZZER_OFF(void)
{
	DIO_SETPIN_VALUE(BUZZER_PRT,BUZZER,DIO_LOW);
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	65 e0       	ldi	r22, 0x05	; 5
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     ba2:	08 95       	ret

00000ba4 <Motor_Initialize>:
 *  Author: User
 */ 
#include "Motor_Private.h"

void Motor_Initialize(void){
	DIO_SETPIN_DIRECTION(H_BRIDGE_ENABLE_PRT, H_BRIDGE_ENABLE1, H_BRIDGE_STATE);
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
	DIO_SETPIN_DIRECTION(H_BRIDGE_ENABLE_PRT, H_BRIDGE_ENABLE2, H_BRIDGE_STATE);
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
	DIO_SETPIN_DIRECTION(H_BRIDGE_A_PRT, H_BRIDGE_A1, H_BRIDGE_STATE);
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	67 e0       	ldi	r22, 0x07	; 7
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
	DIO_SETPIN_DIRECTION(H_BRIDGE_A_PRT, H_BRIDGE_A2, H_BRIDGE_STATE);
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	64 e0       	ldi	r22, 0x04	; 4
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
	DIO_SETPIN_DIRECTION(H_BRIDGE_A_PRT, H_BRIDGE_A3, H_BRIDGE_STATE);
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	65 e0       	ldi	r22, 0x05	; 5
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
	DIO_SETPIN_DIRECTION(H_BRIDGE_A_PRT, H_BRIDGE_A4, H_BRIDGE_STATE);
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	66 e0       	ldi	r22, 0x06	; 6
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
     be0:	08 95       	ret

00000be2 <Motor_ON>:
}
void Motor_ON(motor_direction direction, motor_enable enable_pin){
	if(enable_pin == enable1){
     be2:	61 11       	cpse	r22, r1
     be4:	24 c0       	rjmp	.+72     	; 0xc2e <Motor_ON+0x4c>
		if(direction == clockwise){
     be6:	81 11       	cpse	r24, r1
     be8:	10 c0       	rjmp	.+32     	; 0xc0a <Motor_ON+0x28>
			DIO_SETPIN_VALUE(H_BRIDGE_ENABLE_PRT, H_BRIDGE_ENABLE1, DIO_HIGH);
     bea:	41 e0       	ldi	r20, 0x01	; 1
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
			DIO_SETPIN_VALUE(H_BRIDGE_A_PRT, H_BRIDGE_A1, DIO_HIGH);
     bf4:	41 e0       	ldi	r20, 0x01	; 1
     bf6:	67 e0       	ldi	r22, 0x07	; 7
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
			DIO_SETPIN_VALUE(H_BRIDGE_A_PRT, H_BRIDGE_A2, DIO_LOW);
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	64 e0       	ldi	r22, 0x04	; 4
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     c08:	08 95       	ret
		}
		else if(direction == anticlockwise){
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	a9 f5       	brne	.+106    	; 0xc78 <Motor_ON+0x96>
			DIO_SETPIN_VALUE(H_BRIDGE_ENABLE_PRT, H_BRIDGE_ENABLE1, DIO_HIGH);
     c0e:	41 e0       	ldi	r20, 0x01	; 1
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
			DIO_SETPIN_VALUE(H_BRIDGE_A_PRT, H_BRIDGE_A1, DIO_LOW);
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	67 e0       	ldi	r22, 0x07	; 7
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
			DIO_SETPIN_VALUE(H_BRIDGE_A_PRT, H_BRIDGE_A2, DIO_HIGH);
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	64 e0       	ldi	r22, 0x04	; 4
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     c2c:	08 95       	ret
		}
	}
	else if(enable_pin == enable2){
     c2e:	61 30       	cpi	r22, 0x01	; 1
     c30:	19 f5       	brne	.+70     	; 0xc78 <Motor_ON+0x96>
		if(direction == clockwise){
     c32:	81 11       	cpse	r24, r1
     c34:	10 c0       	rjmp	.+32     	; 0xc56 <Motor_ON+0x74>
			DIO_SETPIN_VALUE(H_BRIDGE_ENABLE_PRT, H_BRIDGE_ENABLE2, DIO_HIGH);
     c36:	41 e0       	ldi	r20, 0x01	; 1
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
			DIO_SETPIN_VALUE(H_BRIDGE_A_PRT, H_BRIDGE_A3, DIO_HIGH);
     c40:	41 e0       	ldi	r20, 0x01	; 1
     c42:	65 e0       	ldi	r22, 0x05	; 5
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
			DIO_SETPIN_VALUE(H_BRIDGE_A_PRT, H_BRIDGE_A4, DIO_LOW);
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	66 e0       	ldi	r22, 0x06	; 6
     c4e:	83 e0       	ldi	r24, 0x03	; 3
     c50:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     c54:	08 95       	ret
		}
		else if(direction == anticlockwise){
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	79 f4       	brne	.+30     	; 0xc78 <Motor_ON+0x96>
			DIO_SETPIN_VALUE(H_BRIDGE_ENABLE_PRT, H_BRIDGE_ENABLE2, DIO_HIGH);
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
			DIO_SETPIN_VALUE(H_BRIDGE_A_PRT, H_BRIDGE_A3, DIO_LOW);
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	65 e0       	ldi	r22, 0x05	; 5
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
			DIO_SETPIN_VALUE(H_BRIDGE_A_PRT, H_BRIDGE_A4, DIO_HIGH);
     c6e:	41 e0       	ldi	r20, 0x01	; 1
     c70:	66 e0       	ldi	r22, 0x06	; 6
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     c78:	08 95       	ret

00000c7a <Motor_OFF>:
		}
	}
}
void Motor_OFF(motor_enable enable_pin){
	if(enable_pin == enable1){
     c7a:	81 11       	cpse	r24, r1
     c7c:	0f c0       	rjmp	.+30     	; 0xc9c <Motor_OFF+0x22>
		DIO_SETPIN_VALUE(H_BRIDGE_ENABLE_PRT, H_BRIDGE_ENABLE1, DIO_LOW);
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
		DIO_SETPIN_VALUE(H_BRIDGE_A_PRT, H_BRIDGE_A1, DIO_LOW);
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	67 e0       	ldi	r22, 0x07	; 7
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
		DIO_SETPIN_VALUE(H_BRIDGE_A_PRT, H_BRIDGE_A2, DIO_LOW);
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	64 e0       	ldi	r22, 0x04	; 4
     c96:	83 e0       	ldi	r24, 0x03	; 3
     c98:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     c9c:	08 95       	ret

00000c9e <LCD_Write_Command>:
		Loc_Row1 += column;
		LCD_Write_Command(Loc_Row1);
		break;
		default:
		Loc_Row0 += column;
		LCD_Write_Command(Loc_Row0);
     c9e:	cf 93       	push	r28
     ca0:	c8 2f       	mov	r28, r24
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	62 e0       	ldi	r22, 0x02	; 2
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	63 e0       	ldi	r22, 0x03	; 3
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     cc0:	8c 2f       	mov	r24, r28
     cc2:	80 7f       	andi	r24, 0xF0	; 240
     cc4:	8b bb       	out	0x1b, r24	; 27
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	63 e0       	ldi	r22, 0x03	; 3
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     cd0:	8f ec       	ldi	r24, 0xCF	; 207
     cd2:	97 e0       	ldi	r25, 0x07	; 7
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <LCD_Write_Command+0x36>
     cd8:	00 c0       	rjmp	.+0      	; 0xcda <LCD_Write_Command+0x3c>
     cda:	00 00       	nop
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	63 e0       	ldi	r22, 0x03	; 3
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     ce6:	20 e1       	ldi	r18, 0x10	; 16
     ce8:	c2 9f       	mul	r28, r18
     cea:	c0 01       	movw	r24, r0
     cec:	11 24       	eor	r1, r1
     cee:	8b bb       	out	0x1b, r24	; 27
     cf0:	41 e0       	ldi	r20, 0x01	; 1
     cf2:	63 e0       	ldi	r22, 0x03	; 3
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     cfa:	8f ec       	ldi	r24, 0xCF	; 207
     cfc:	97 e0       	ldi	r25, 0x07	; 7
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <LCD_Write_Command+0x60>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <LCD_Write_Command+0x66>
     d04:	00 00       	nop
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	63 e0       	ldi	r22, 0x03	; 3
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     d10:	8f e0       	ldi	r24, 0x0F	; 15
     d12:	97 e2       	ldi	r25, 0x27	; 39
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <LCD_Write_Command+0x76>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <LCD_Write_Command+0x7c>
     d1a:	00 00       	nop
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <LCD_Initialize>:
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	62 e0       	ldi	r22, 0x02	; 2
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	63 e0       	ldi	r22, 0x03	; 3
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	64 e0       	ldi	r22, 0x04	; 4
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	65 e0       	ldi	r22, 0x05	; 5
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	66 e0       	ldi	r22, 0x06	; 6
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	67 e0       	ldi	r22, 0x07	; 7
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
     d66:	83 e3       	ldi	r24, 0x33	; 51
     d68:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
     d6c:	82 e3       	ldi	r24, 0x32	; 50
     d6e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
     d72:	88 e2       	ldi	r24, 0x28	; 40
     d74:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
     d84:	8c e0       	ldi	r24, 0x0C	; 12
     d86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
     d8a:	86 e0       	ldi	r24, 0x06	; 6
     d8c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
     d90:	08 95       	ret

00000d92 <LCD_Write_Character>:
     d92:	cf 93       	push	r28
     d94:	c8 2f       	mov	r28, r24
     d96:	41 e0       	ldi	r20, 0x01	; 1
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	62 e0       	ldi	r22, 0x02	; 2
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	63 e0       	ldi	r22, 0x03	; 3
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     db4:	8c 2f       	mov	r24, r28
     db6:	80 7f       	andi	r24, 0xF0	; 240
     db8:	8b bb       	out	0x1b, r24	; 27
     dba:	41 e0       	ldi	r20, 0x01	; 1
     dbc:	63 e0       	ldi	r22, 0x03	; 3
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     dc4:	8f ec       	ldi	r24, 0xCF	; 207
     dc6:	97 e0       	ldi	r25, 0x07	; 7
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <LCD_Write_Character+0x36>
     dcc:	00 c0       	rjmp	.+0      	; 0xdce <LCD_Write_Character+0x3c>
     dce:	00 00       	nop
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	63 e0       	ldi	r22, 0x03	; 3
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     dda:	20 e1       	ldi	r18, 0x10	; 16
     ddc:	c2 9f       	mul	r28, r18
     dde:	c0 01       	movw	r24, r0
     de0:	11 24       	eor	r1, r1
     de2:	8b bb       	out	0x1b, r24	; 27
     de4:	41 e0       	ldi	r20, 0x01	; 1
     de6:	63 e0       	ldi	r22, 0x03	; 3
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     dee:	8f ec       	ldi	r24, 0xCF	; 207
     df0:	97 e0       	ldi	r25, 0x07	; 7
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <LCD_Write_Character+0x60>
     df6:	00 c0       	rjmp	.+0      	; 0xdf8 <LCD_Write_Character+0x66>
     df8:	00 00       	nop
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	63 e0       	ldi	r22, 0x03	; 3
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     e04:	8f e0       	ldi	r24, 0x0F	; 15
     e06:	97 e2       	ldi	r25, 0x27	; 39
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <LCD_Write_Character+0x76>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <LCD_Write_Character+0x7c>
     e0e:	00 00       	nop
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <LCD_Write_string>:
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ec 01       	movw	r28, r24
     e1a:	88 81       	ld	r24, Y
     e1c:	88 23       	and	r24, r24
     e1e:	61 f0       	breq	.+24     	; 0xe38 <LCD_Write_string+0x24>
     e20:	21 96       	adiw	r28, 0x01	; 1
     e22:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCD_Write_Character>
     e26:	8f e1       	ldi	r24, 0x1F	; 31
     e28:	9e e4       	ldi	r25, 0x4E	; 78
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <LCD_Write_string+0x16>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <LCD_Write_string+0x1c>
     e30:	00 00       	nop
     e32:	89 91       	ld	r24, Y+
     e34:	81 11       	cpse	r24, r1
     e36:	f5 cf       	rjmp	.-22     	; 0xe22 <LCD_Write_string+0xe>
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <LCD_Write_Number>:
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2a 97       	sbiw	r28, 0x0a	; 10
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	2a e0       	ldi	r18, 0x0A	; 10
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	ae 01       	movw	r20, r28
     e58:	4f 5f       	subi	r20, 0xFF	; 255
     e5a:	5f 4f       	sbci	r21, 0xFF	; 255
     e5c:	0e 94 ad 09 	call	0x135a	; 0x135a <ltoa>
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_Write_string>
     e68:	2a 96       	adiw	r28, 0x0a	; 10
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <LCD_ClearScreen>:
		break;
	}
}
void LCD_ClearScreen(void)
{
	LCD_Write_Command(0x01);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_Write_Command>
     e80:	08 95       	ret

00000e82 <LED0_Initialize>:
{
	DIO_SETPIN_DIRECTION(LED0_PRT,LED0 , DIO_OUTPUT);
}
void LED0_ON(void)
{
	DIO_SETPIN_VALUE(LED0_PRT,LED0,DIO_HIGH);
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	64 e0       	ldi	r22, 0x04	; 4
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_SETPIN_DIRECTION>
     e8c:	08 95       	ret

00000e8e <LED0_OFF>:
}
void LED0_OFF(void)
{
	DIO_SETPIN_VALUE(LED0_PRT,LED0,DIO_LOW);
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	64 e0       	ldi	r22, 0x04	; 4
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     e98:	08 95       	ret

00000e9a <LED0_TGL>:
	
}
void LED0_TGL(void)
{
	DIO_TOGPIN_VALUE(LED0_PRT,LED0);
     e9a:	64 e0       	ldi	r22, 0x04	; 4
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_TOGPIN_VALUE>
     ea2:	08 95       	ret

00000ea4 <LED1_OFF>:
{
	DIO_SETPIN_VALUE(LED1_PRT,LED1,DIO_HIGH);
}
void LED1_OFF(void)
{
	DIO_SETPIN_VALUE(LED1_PRT,LED1,DIO_LOW);
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	65 e0       	ldi	r22, 0x05	; 5
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     eae:	08 95       	ret

00000eb0 <LED1_TGL>:
	
}
void LED1_TGL(void)
{
	DIO_TOGPIN_VALUE(LED1_PRT,LED1);
     eb0:	65 e0       	ldi	r22, 0x05	; 5
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_TOGPIN_VALUE>
     eb8:	08 95       	ret

00000eba <LED2_ON>:
{
	DIO_SETPIN_DIRECTION(LED2_PRT,LED2,DIO_OUTPUT);
}
void LED2_ON(void)
{
	DIO_SETPIN_VALUE(LED2_PRT,LED2,DIO_HIGH);
     eba:	41 e0       	ldi	r20, 0x01	; 1
     ebc:	66 e0       	ldi	r22, 0x06	; 6
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_SETPIN_VALUE>
     ec4:	08 95       	ret

00000ec6 <First_LM35_read>:



uint16_t First_LM35_read(void)
{
	uint16_t adc = ADC_READ(ADC_CH0);
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	0e 94 cb 07 	call	0xf96	; 0xf96 <ADC_READ>
	uint16_t volt = ((uint32_t)5000*adc)/1024;
	uint16_t temp = volt ;
	return temp ;
     ecc:	9c 01       	movw	r18, r24
     ece:	a8 e8       	ldi	r26, 0x88	; 136
     ed0:	b3 e1       	ldi	r27, 0x13	; 19
     ed2:	0e 94 9e 09 	call	0x133c	; 0x133c <__umulhisi3>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	07 2e       	mov	r0, r23
     edc:	7a e0       	ldi	r23, 0x0A	; 10
     ede:	b6 95       	lsr	r27
     ee0:	a7 95       	ror	r26
     ee2:	97 95       	ror	r25
     ee4:	87 95       	ror	r24
     ee6:	7a 95       	dec	r23
     ee8:	d1 f7       	brne	.-12     	; 0xede <First_LM35_read+0x18>
     eea:	70 2d       	mov	r23, r0
}
     eec:	08 95       	ret

00000eee <Second_LM35_read>:
uint16_t Second_LM35_read(void)
{
	uint16_t adc = ADC_READ(ADC_CH1);
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	0e 94 cb 07 	call	0xf96	; 0xf96 <ADC_READ>
	uint16_t volt = ((uint32_t)5000*adc)/1024;
	uint16_t temp = volt ;
	return temp ;
     ef4:	9c 01       	movw	r18, r24
     ef6:	a8 e8       	ldi	r26, 0x88	; 136
     ef8:	b3 e1       	ldi	r27, 0x13	; 19
     efa:	0e 94 9e 09 	call	0x133c	; 0x133c <__umulhisi3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	07 2e       	mov	r0, r23
     f04:	7a e0       	ldi	r23, 0x0A	; 10
     f06:	b6 95       	lsr	r27
     f08:	a7 95       	ror	r26
     f0a:	97 95       	ror	r25
     f0c:	87 95       	ror	r24
     f0e:	7a 95       	dec	r23
     f10:	d1 f7       	brne	.-12     	; 0xf06 <Second_LM35_read+0x18>
     f12:	70 2d       	mov	r23, r0
}
     f14:	08 95       	ret

00000f16 <ADC_Initialization>:
*/

#include "ADC_Private.h"
void ADC_Initialization(ADC_PRE prescalar , ADC_VREF refrence)
{
	switch(refrence)
     f16:	61 30       	cpi	r22, 0x01	; 1
     f18:	49 f0       	breq	.+18     	; 0xf2c <ADC_Initialization+0x16>
     f1a:	28 f0       	brcs	.+10     	; 0xf26 <ADC_Initialization+0x10>
     f1c:	62 30       	cpi	r22, 0x02	; 2
     f1e:	49 f0       	breq	.+18     	; 0xf32 <ADC_Initialization+0x1c>
     f20:	63 30       	cpi	r22, 0x03	; 3
     f22:	51 f0       	breq	.+20     	; 0xf38 <ADC_Initialization+0x22>
     f24:	0b c0       	rjmp	.+22     	; 0xf3c <ADC_Initialization+0x26>
	{
		case AREF:
		CLR_BIT(ADMUX,REFS0); 		CLR_BIT(ADMUX,REFS1);
     f26:	3e 98       	cbi	0x07, 6	; 7
     f28:	3f 98       	cbi	0x07, 7	; 7
		break;
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <ADC_Initialization+0x26>
		
		case AVCC:
		SET_BIT(ADMUX,REFS0); 		CLR_BIT(ADMUX,REFS1);
     f2c:	3e 9a       	sbi	0x07, 6	; 7
     f2e:	3f 98       	cbi	0x07, 7	; 7
		break;
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <ADC_Initialization+0x26>
		
		case RESERVED:
		CLR_BIT(ADMUX,REFS0); 		SET_BIT(ADMUX,REFS1);
     f32:	3e 98       	cbi	0x07, 6	; 7
     f34:	3f 9a       	sbi	0x07, 7	; 7
		break;
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <ADC_Initialization+0x26>
		
		case INTERNAL:
		SET_BIT(ADMUX,REFS0); 			SET_BIT(ADMUX,REFS1);
     f38:	3e 9a       	sbi	0x07, 6	; 7
     f3a:	3f 9a       	sbi	0x07, 7	; 7
		break;
	}
	
	switch(prescalar)
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 30       	cpi	r24, 0x08	; 8
     f40:	91 05       	cpc	r25, r1
     f42:	20 f5       	brcc	.+72     	; 0xf8c <ADC_Initialization+0x76>
     f44:	fc 01       	movw	r30, r24
     f46:	e6 5d       	subi	r30, 0xD6	; 214
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__tablejump2__>
	{
		case ADC_PR1:
		CLR_BIT(ADCSRA,ADPS2) ; CLR_BIT(ADCSRA,ADPS1) ; CLR_BIT(ADCSRA,ADPS0) ;
     f4e:	32 98       	cbi	0x06, 2	; 6
     f50:	31 98       	cbi	0x06, 1	; 6
     f52:	30 98       	cbi	0x06, 0	; 6
		break;
     f54:	1b c0       	rjmp	.+54     	; 0xf8c <ADC_Initialization+0x76>
		case ADC_PR2:
		CLR_BIT(ADCSRA,ADPS2) ; CLR_BIT(ADCSRA,ADPS1) ; SET_BIT(ADCSRA,ADPS0) ;
     f56:	32 98       	cbi	0x06, 2	; 6
     f58:	31 98       	cbi	0x06, 1	; 6
     f5a:	30 9a       	sbi	0x06, 0	; 6
		break;
     f5c:	17 c0       	rjmp	.+46     	; 0xf8c <ADC_Initialization+0x76>
		case ADC_PR4:
		CLR_BIT(ADCSRA,ADPS2) ; SET_BIT(ADCSRA,ADPS1) ; CLR_BIT(ADCSRA,ADPS0) ;
     f5e:	32 98       	cbi	0x06, 2	; 6
     f60:	31 9a       	sbi	0x06, 1	; 6
     f62:	30 98       	cbi	0x06, 0	; 6
		break;
     f64:	13 c0       	rjmp	.+38     	; 0xf8c <ADC_Initialization+0x76>
		case ADC_PR8:
		CLR_BIT(ADCSRA,ADPS2) ; SET_BIT(ADCSRA,ADPS1) ; SET_BIT(ADCSRA,ADPS0) ;
     f66:	32 98       	cbi	0x06, 2	; 6
     f68:	31 9a       	sbi	0x06, 1	; 6
     f6a:	30 9a       	sbi	0x06, 0	; 6
		break;
     f6c:	0f c0       	rjmp	.+30     	; 0xf8c <ADC_Initialization+0x76>
		case ADC_PR16:
		SET_BIT(ADCSRA,ADPS2) ; CLR_BIT(ADCSRA,ADPS1) ; CLR_BIT(ADCSRA,ADPS0) ;
     f6e:	32 9a       	sbi	0x06, 2	; 6
     f70:	31 98       	cbi	0x06, 1	; 6
     f72:	30 98       	cbi	0x06, 0	; 6
		break;
     f74:	0b c0       	rjmp	.+22     	; 0xf8c <ADC_Initialization+0x76>
		case ADC_PR32:
		SET_BIT(ADCSRA,ADPS2); CLR_BIT(ADCSRA,ADPS1); SET_BIT(ADCSRA,ADPS0);
     f76:	32 9a       	sbi	0x06, 2	; 6
     f78:	31 98       	cbi	0x06, 1	; 6
     f7a:	30 9a       	sbi	0x06, 0	; 6
		break;
     f7c:	07 c0       	rjmp	.+14     	; 0xf8c <ADC_Initialization+0x76>
		case ADC_PR64:
		SET_BIT(ADCSRA,ADPS2); SET_BIT(ADCSRA,ADPS1); CLR_BIT(ADCSRA,ADPS0);
     f7e:	32 9a       	sbi	0x06, 2	; 6
     f80:	31 9a       	sbi	0x06, 1	; 6
     f82:	30 98       	cbi	0x06, 0	; 6
		break;
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <ADC_Initialization+0x76>
		case ADC_PR128:
		SET_BIT(ADCSRA,ADPS2); SET_BIT(ADCSRA,ADPS1); SET_BIT(ADCSRA,ADPS0);
     f86:	32 9a       	sbi	0x06, 2	; 6
     f88:	31 9a       	sbi	0x06, 1	; 6
     f8a:	30 9a       	sbi	0x06, 0	; 6
		break;
	}
		// ADC Enable
		SET_BIT(ADCSRA, ADEN);
     f8c:	37 9a       	sbi	0x06, 7	; 6
		// ADC interrupt disable
		CLR_BIT(ADCSRA, ADIE);
     f8e:	33 98       	cbi	0x06, 3	; 6
		// ADC auto trigger enable
		SET_BIT(ADCSRA, ADATE);
     f90:	35 9a       	sbi	0x06, 5	; 6
		// ADC Right adjust
		CLR_BIT(ADMUX, ADLAR);
     f92:	3d 98       	cbi	0x07, 5	; 7
     f94:	08 95       	ret

00000f96 <ADC_READ>:
}
uint16_t ADC_READ( ADC_Channel channel)
{
	uint16_t value = 0 ;
	
	switch(channel)
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	88 30       	cpi	r24, 0x08	; 8
     f9a:	91 05       	cpc	r25, r1
     f9c:	a0 f5       	brcc	.+104    	; 0x1006 <ADC_READ+0x70>
     f9e:	fc 01       	movw	r30, r24
     fa0:	ee 5c       	subi	r30, 0xCE	; 206
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__tablejump2__>
	{
		case ADC_CH0:
		CLR_BIT(ADMUX,MUX4); 		CLR_BIT(ADMUX,MUX3); 		CLR_BIT(ADMUX,MUX2); 		CLR_BIT(ADMUX,MUX1); 		CLR_BIT(ADMUX,MUX0);
     fa8:	3c 98       	cbi	0x07, 4	; 7
     faa:	3b 98       	cbi	0x07, 3	; 7
     fac:	3a 98       	cbi	0x07, 2	; 7
     fae:	39 98       	cbi	0x07, 1	; 7
     fb0:	38 98       	cbi	0x07, 0	; 7
		break;
     fb2:	29 c0       	rjmp	.+82     	; 0x1006 <ADC_READ+0x70>
		case ADC_CH1:
		CLR_BIT(ADMUX,MUX4); 		CLR_BIT(ADMUX,MUX3); 		CLR_BIT(ADMUX,MUX2); 		CLR_BIT(ADMUX,MUX1); 		SET_BIT(ADMUX,MUX0);
     fb4:	3c 98       	cbi	0x07, 4	; 7
     fb6:	3b 98       	cbi	0x07, 3	; 7
     fb8:	3a 98       	cbi	0x07, 2	; 7
     fba:	39 98       	cbi	0x07, 1	; 7
     fbc:	38 9a       	sbi	0x07, 0	; 7
		break;
     fbe:	23 c0       	rjmp	.+70     	; 0x1006 <ADC_READ+0x70>
		case ADC_CH2:
		CLR_BIT(ADMUX,MUX4); 		CLR_BIT(ADMUX,MUX3); 		CLR_BIT(ADMUX,MUX2); 		SET_BIT(ADMUX,MUX1); 		CLR_BIT(ADMUX,MUX0);		
     fc0:	3c 98       	cbi	0x07, 4	; 7
     fc2:	3b 98       	cbi	0x07, 3	; 7
     fc4:	3a 98       	cbi	0x07, 2	; 7
     fc6:	39 9a       	sbi	0x07, 1	; 7
     fc8:	38 98       	cbi	0x07, 0	; 7
		break;
     fca:	1d c0       	rjmp	.+58     	; 0x1006 <ADC_READ+0x70>
		case ADC_CH3:
		CLR_BIT(ADMUX,MUX4); 		CLR_BIT(ADMUX,MUX3); 		CLR_BIT(ADMUX,MUX2); 		SET_BIT(ADMUX,MUX1); 		SET_BIT(ADMUX,MUX0);		
     fcc:	3c 98       	cbi	0x07, 4	; 7
     fce:	3b 98       	cbi	0x07, 3	; 7
     fd0:	3a 98       	cbi	0x07, 2	; 7
     fd2:	39 9a       	sbi	0x07, 1	; 7
     fd4:	38 9a       	sbi	0x07, 0	; 7
		break;
     fd6:	17 c0       	rjmp	.+46     	; 0x1006 <ADC_READ+0x70>
		case ADC_CH4:
		CLR_BIT(ADMUX,MUX4); 		CLR_BIT(ADMUX,MUX3); 		SET_BIT(ADMUX,MUX2); 		CLR_BIT(ADMUX,MUX1); 		CLR_BIT(ADMUX,MUX0);		
     fd8:	3c 98       	cbi	0x07, 4	; 7
     fda:	3b 98       	cbi	0x07, 3	; 7
     fdc:	3a 9a       	sbi	0x07, 2	; 7
     fde:	39 98       	cbi	0x07, 1	; 7
     fe0:	38 98       	cbi	0x07, 0	; 7
		break;
     fe2:	11 c0       	rjmp	.+34     	; 0x1006 <ADC_READ+0x70>
		case ADC_CH5:
		CLR_BIT(ADMUX,MUX4); 		CLR_BIT(ADMUX,MUX3); 		SET_BIT(ADMUX,MUX2); 		CLR_BIT(ADMUX,MUX1); 		SET_BIT(ADMUX,MUX0);		
     fe4:	3c 98       	cbi	0x07, 4	; 7
     fe6:	3b 98       	cbi	0x07, 3	; 7
     fe8:	3a 9a       	sbi	0x07, 2	; 7
     fea:	39 98       	cbi	0x07, 1	; 7
     fec:	38 9a       	sbi	0x07, 0	; 7
		break;
     fee:	0b c0       	rjmp	.+22     	; 0x1006 <ADC_READ+0x70>
		case ADC_CH6:
		CLR_BIT(ADMUX,MUX4); 		CLR_BIT(ADMUX,MUX3); 		SET_BIT(ADMUX,MUX2); 		SET_BIT(ADMUX,MUX1); 		CLR_BIT(ADMUX,MUX0);		
     ff0:	3c 98       	cbi	0x07, 4	; 7
     ff2:	3b 98       	cbi	0x07, 3	; 7
     ff4:	3a 9a       	sbi	0x07, 2	; 7
     ff6:	39 9a       	sbi	0x07, 1	; 7
     ff8:	38 98       	cbi	0x07, 0	; 7
		break;
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <ADC_READ+0x70>
		case ADC_CH7:
		CLR_BIT(ADMUX,MUX4); 		CLR_BIT(ADMUX,MUX3); 		SET_BIT(ADMUX,MUX2); 		SET_BIT(ADMUX,MUX1); 		SET_BIT(ADMUX,MUX0);
     ffc:	3c 98       	cbi	0x07, 4	; 7
     ffe:	3b 98       	cbi	0x07, 3	; 7
    1000:	3a 9a       	sbi	0x07, 2	; 7
    1002:	39 9a       	sbi	0x07, 1	; 7
    1004:	38 9a       	sbi	0x07, 0	; 7
		break;
	}
	SET_BIT(ADCSRA,ADSC);
    1006:	36 9a       	sbi	0x06, 6	; 6
	
	while(GET_BIT(ADCSRA,ADIF) != 1);
    1008:	34 9b       	sbis	0x06, 4	; 6
    100a:	fe cf       	rjmp	.-4      	; 0x1008 <ADC_READ+0x72>
	
	value = ADC_DATA;
    100c:	84 b1       	in	r24, 0x04	; 4
    100e:	95 b1       	in	r25, 0x05	; 5
	
	return value ; 
	
}
    1010:	08 95       	ret

00001012 <DIO_SETPIN_DIRECTION>:
		break;
	}
	
	return value ; 
	
}
    1012:	44 23       	and	r20, r20
    1014:	d9 f1       	breq	.+118    	; 0x108c <DIO_SETPIN_DIRECTION+0x7a>
    1016:	41 30       	cpi	r20, 0x01	; 1
    1018:	09 f0       	breq	.+2      	; 0x101c <DIO_SETPIN_DIRECTION+0xa>
    101a:	6b c0       	rjmp	.+214    	; 0x10f2 <DIO_SETPIN_DIRECTION+0xe0>
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	91 f0       	breq	.+36     	; 0x1044 <DIO_SETPIN_DIRECTION+0x32>
    1020:	28 f0       	brcs	.+10     	; 0x102c <DIO_SETPIN_DIRECTION+0x1a>
    1022:	82 30       	cpi	r24, 0x02	; 2
    1024:	d9 f0       	breq	.+54     	; 0x105c <DIO_SETPIN_DIRECTION+0x4a>
    1026:	83 30       	cpi	r24, 0x03	; 3
    1028:	29 f1       	breq	.+74     	; 0x1074 <DIO_SETPIN_DIRECTION+0x62>
    102a:	08 95       	ret
    102c:	2a b3       	in	r18, 0x1a	; 26
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_SETPIN_DIRECTION+0x26>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	6a 95       	dec	r22
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_SETPIN_DIRECTION+0x22>
    103c:	80 95       	com	r24
    103e:	82 23       	and	r24, r18
    1040:	8a bb       	out	0x1a, r24	; 26
    1042:	08 95       	ret
    1044:	27 b3       	in	r18, 0x17	; 23
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_SETPIN_DIRECTION+0x3e>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	6a 95       	dec	r22
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_SETPIN_DIRECTION+0x3a>
    1054:	80 95       	com	r24
    1056:	82 23       	and	r24, r18
    1058:	87 bb       	out	0x17, r24	; 23
    105a:	08 95       	ret
    105c:	24 b3       	in	r18, 0x14	; 20
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_SETPIN_DIRECTION+0x56>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	6a 95       	dec	r22
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_SETPIN_DIRECTION+0x52>
    106c:	80 95       	com	r24
    106e:	82 23       	and	r24, r18
    1070:	84 bb       	out	0x14, r24	; 20
    1072:	08 95       	ret
    1074:	21 b3       	in	r18, 0x11	; 17
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_SETPIN_DIRECTION+0x6e>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	6a 95       	dec	r22
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_SETPIN_DIRECTION+0x6a>
    1084:	80 95       	com	r24
    1086:	82 23       	and	r24, r18
    1088:	81 bb       	out	0x11, r24	; 17
    108a:	08 95       	ret
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	89 f0       	breq	.+34     	; 0x10b2 <DIO_SETPIN_DIRECTION+0xa0>
    1090:	28 f0       	brcs	.+10     	; 0x109c <DIO_SETPIN_DIRECTION+0x8a>
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	c9 f0       	breq	.+50     	; 0x10c8 <DIO_SETPIN_DIRECTION+0xb6>
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	11 f1       	breq	.+68     	; 0x10de <DIO_SETPIN_DIRECTION+0xcc>
    109a:	08 95       	ret
    109c:	2a b3       	in	r18, 0x1a	; 26
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_SETPIN_DIRECTION+0x96>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	6a 95       	dec	r22
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_SETPIN_DIRECTION+0x92>
    10ac:	82 2b       	or	r24, r18
    10ae:	8a bb       	out	0x1a, r24	; 26
    10b0:	08 95       	ret
    10b2:	27 b3       	in	r18, 0x17	; 23
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_SETPIN_DIRECTION+0xac>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	6a 95       	dec	r22
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_SETPIN_DIRECTION+0xa8>
    10c2:	82 2b       	or	r24, r18
    10c4:	87 bb       	out	0x17, r24	; 23
    10c6:	08 95       	ret
    10c8:	24 b3       	in	r18, 0x14	; 20
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_SETPIN_DIRECTION+0xc2>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	6a 95       	dec	r22
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_SETPIN_DIRECTION+0xbe>
    10d8:	82 2b       	or	r24, r18
    10da:	84 bb       	out	0x14, r24	; 20
    10dc:	08 95       	ret
    10de:	21 b3       	in	r18, 0x11	; 17
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_SETPIN_DIRECTION+0xd8>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	6a 95       	dec	r22
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_SETPIN_DIRECTION+0xd4>
    10ee:	82 2b       	or	r24, r18
    10f0:	81 bb       	out	0x11, r24	; 17
    10f2:	08 95       	ret

000010f4 <DIO_SETPIN_VALUE>:
    10f4:	44 23       	and	r20, r20
    10f6:	19 f0       	breq	.+6      	; 0x10fe <DIO_SETPIN_VALUE+0xa>
    10f8:	41 30       	cpi	r20, 0x01	; 1
    10fa:	c9 f1       	breq	.+114    	; 0x116e <DIO_SETPIN_VALUE+0x7a>
    10fc:	08 95       	ret
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 f0       	breq	.+36     	; 0x1126 <DIO_SETPIN_VALUE+0x32>
    1102:	28 f0       	brcs	.+10     	; 0x110e <DIO_SETPIN_VALUE+0x1a>
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	d9 f0       	breq	.+54     	; 0x113e <DIO_SETPIN_VALUE+0x4a>
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	29 f1       	breq	.+74     	; 0x1156 <DIO_SETPIN_VALUE+0x62>
    110c:	08 95       	ret
    110e:	2b b3       	in	r18, 0x1b	; 27
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_SETPIN_VALUE+0x26>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	6a 95       	dec	r22
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_SETPIN_VALUE+0x22>
    111e:	80 95       	com	r24
    1120:	82 23       	and	r24, r18
    1122:	8b bb       	out	0x1b, r24	; 27
    1124:	08 95       	ret
    1126:	28 b3       	in	r18, 0x18	; 24
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_SETPIN_VALUE+0x3e>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	6a 95       	dec	r22
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_SETPIN_VALUE+0x3a>
    1136:	80 95       	com	r24
    1138:	82 23       	and	r24, r18
    113a:	88 bb       	out	0x18, r24	; 24
    113c:	08 95       	ret
    113e:	25 b3       	in	r18, 0x15	; 21
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_SETPIN_VALUE+0x56>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	6a 95       	dec	r22
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_SETPIN_VALUE+0x52>
    114e:	80 95       	com	r24
    1150:	82 23       	and	r24, r18
    1152:	85 bb       	out	0x15, r24	; 21
    1154:	08 95       	ret
    1156:	22 b3       	in	r18, 0x12	; 18
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_SETPIN_VALUE+0x6e>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	6a 95       	dec	r22
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_SETPIN_VALUE+0x6a>
    1166:	80 95       	com	r24
    1168:	82 23       	and	r24, r18
    116a:	82 bb       	out	0x12, r24	; 18
    116c:	08 95       	ret
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	89 f0       	breq	.+34     	; 0x1194 <DIO_SETPIN_VALUE+0xa0>
    1172:	28 f0       	brcs	.+10     	; 0x117e <DIO_SETPIN_VALUE+0x8a>
    1174:	82 30       	cpi	r24, 0x02	; 2
    1176:	c9 f0       	breq	.+50     	; 0x11aa <DIO_SETPIN_VALUE+0xb6>
    1178:	83 30       	cpi	r24, 0x03	; 3
    117a:	11 f1       	breq	.+68     	; 0x11c0 <DIO_SETPIN_VALUE+0xcc>
    117c:	08 95       	ret
    117e:	2b b3       	in	r18, 0x1b	; 27
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_SETPIN_VALUE+0x96>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	6a 95       	dec	r22
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_SETPIN_VALUE+0x92>
    118e:	82 2b       	or	r24, r18
    1190:	8b bb       	out	0x1b, r24	; 27
    1192:	08 95       	ret
    1194:	28 b3       	in	r18, 0x18	; 24
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_SETPIN_VALUE+0xac>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	6a 95       	dec	r22
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <DIO_SETPIN_VALUE+0xa8>
    11a4:	82 2b       	or	r24, r18
    11a6:	88 bb       	out	0x18, r24	; 24
    11a8:	08 95       	ret
    11aa:	25 b3       	in	r18, 0x15	; 21
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_SETPIN_VALUE+0xc2>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	6a 95       	dec	r22
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_SETPIN_VALUE+0xbe>
    11ba:	82 2b       	or	r24, r18
    11bc:	85 bb       	out	0x15, r24	; 21
    11be:	08 95       	ret
    11c0:	22 b3       	in	r18, 0x12	; 18
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_SETPIN_VALUE+0xd8>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	6a 95       	dec	r22
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_SETPIN_VALUE+0xd4>
    11d0:	82 2b       	or	r24, r18
    11d2:	82 bb       	out	0x12, r24	; 18
    11d4:	08 95       	ret

000011d6 <DIO_TOGPIN_VALUE>:
void DIO_TOGPIN_VALUE(DIO_PORTS port ,DIO_PINS pin)
{
	switch(port)
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	89 f0       	breq	.+34     	; 0x11fc <DIO_TOGPIN_VALUE+0x26>
    11da:	28 f0       	brcs	.+10     	; 0x11e6 <DIO_TOGPIN_VALUE+0x10>
    11dc:	82 30       	cpi	r24, 0x02	; 2
    11de:	c9 f0       	breq	.+50     	; 0x1212 <DIO_TOGPIN_VALUE+0x3c>
    11e0:	83 30       	cpi	r24, 0x03	; 3
    11e2:	11 f1       	breq	.+68     	; 0x1228 <DIO_TOGPIN_VALUE+0x52>
    11e4:	08 95       	ret
	{
		case DIO_PORTA:
		TGL_BIT(PORTA , pin);
    11e6:	2b b3       	in	r18, 0x1b	; 27
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_TOGPIN_VALUE+0x1c>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	6a 95       	dec	r22
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_TOGPIN_VALUE+0x18>
    11f6:	82 27       	eor	r24, r18
    11f8:	8b bb       	out	0x1b, r24	; 27
		break;
    11fa:	08 95       	ret
		case DIO_PORTB:
		TGL_BIT(PORTB ,pin);
    11fc:	28 b3       	in	r18, 0x18	; 24
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_TOGPIN_VALUE+0x32>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	6a 95       	dec	r22
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_TOGPIN_VALUE+0x2e>
    120c:	82 27       	eor	r24, r18
    120e:	88 bb       	out	0x18, r24	; 24
		break;
    1210:	08 95       	ret
		case DIO_PORTC:
		TGL_BIT(PORTC , pin);
    1212:	25 b3       	in	r18, 0x15	; 21
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_TOGPIN_VALUE+0x48>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	6a 95       	dec	r22
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_TOGPIN_VALUE+0x44>
    1222:	82 27       	eor	r24, r18
    1224:	85 bb       	out	0x15, r24	; 21
		break;
    1226:	08 95       	ret
		case DIO_PORTD:
		TGL_BIT(PORTD , pin);
    1228:	22 b3       	in	r18, 0x12	; 18
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_TOGPIN_VALUE+0x5e>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	6a 95       	dec	r22
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_TOGPIN_VALUE+0x5a>
    1238:	82 27       	eor	r24, r18
    123a:	82 bb       	out	0x12, r24	; 18
    123c:	08 95       	ret

0000123e <EXT_INTERRUPT_Initialization>:
#include "EXT_INTERRUPT_Private.h"

void EXT_INTERRUPT_Initialization(EXT_INT interrupt , EXT_INT_SENSE sense)
{
	/*Disable global interrupt while initialization*/
	CLR_BIT(SREG,7);
    123e:	9f b7       	in	r25, 0x3f	; 63
    1240:	9f 77       	andi	r25, 0x7F	; 127
    1242:	9f bf       	out	0x3f, r25	; 63
	switch(interrupt)
    1244:	88 23       	and	r24, r24
    1246:	19 f0       	breq	.+6      	; 0x124e <EXT_INTERRUPT_Initialization+0x10>
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	41 f1       	breq	.+80     	; 0x129c <EXT_INTERRUPT_Initialization+0x5e>
    124c:	4d c0       	rjmp	.+154    	; 0x12e8 <EXT_INTERRUPT_Initialization+0xaa>
	{
		case EXT_INT0:
		switch(sense)
    124e:	61 30       	cpi	r22, 0x01	; 1
    1250:	69 f0       	breq	.+26     	; 0x126c <EXT_INTERRUPT_Initialization+0x2e>
    1252:	28 f0       	brcs	.+10     	; 0x125e <EXT_INTERRUPT_Initialization+0x20>
    1254:	62 30       	cpi	r22, 0x02	; 2
    1256:	89 f0       	breq	.+34     	; 0x127a <EXT_INTERRUPT_Initialization+0x3c>
    1258:	63 30       	cpi	r22, 0x03	; 3
    125a:	b1 f0       	breq	.+44     	; 0x1288 <EXT_INTERRUPT_Initialization+0x4a>
    125c:	1b c0       	rjmp	.+54     	; 0x1294 <EXT_INTERRUPT_Initialization+0x56>
		{
			case LOW:
			CLR_BIT(MCUCR,ISC01);  CLR_BIT(MCUCR,ISC00);
    125e:	85 b7       	in	r24, 0x35	; 53
    1260:	8d 7f       	andi	r24, 0xFD	; 253
    1262:	85 bf       	out	0x35, r24	; 53
    1264:	85 b7       	in	r24, 0x35	; 53
    1266:	8e 7f       	andi	r24, 0xFE	; 254
    1268:	85 bf       	out	0x35, r24	; 53
			break;
    126a:	14 c0       	rjmp	.+40     	; 0x1294 <EXT_INTERRUPT_Initialization+0x56>
			
			case HIGH:
			CLR_BIT(MCUCR,ISC01);  SET_BIT(MCUCR,ISC00);
    126c:	85 b7       	in	r24, 0x35	; 53
    126e:	8d 7f       	andi	r24, 0xFD	; 253
    1270:	85 bf       	out	0x35, r24	; 53
    1272:	85 b7       	in	r24, 0x35	; 53
    1274:	81 60       	ori	r24, 0x01	; 1
    1276:	85 bf       	out	0x35, r24	; 53
			break;
    1278:	0d c0       	rjmp	.+26     	; 0x1294 <EXT_INTERRUPT_Initialization+0x56>
			
			case FAILING:
			SET_BIT(MCUCR,ISC01);  CLR_BIT(MCUCR,ISC00);
    127a:	85 b7       	in	r24, 0x35	; 53
    127c:	82 60       	ori	r24, 0x02	; 2
    127e:	85 bf       	out	0x35, r24	; 53
    1280:	85 b7       	in	r24, 0x35	; 53
    1282:	8e 7f       	andi	r24, 0xFE	; 254
    1284:	85 bf       	out	0x35, r24	; 53
			break;
    1286:	06 c0       	rjmp	.+12     	; 0x1294 <EXT_INTERRUPT_Initialization+0x56>
			
			case RISING:
			SET_BIT(MCUCR,ISC01);  SET_BIT(MCUCR,ISC00);
    1288:	85 b7       	in	r24, 0x35	; 53
    128a:	82 60       	ori	r24, 0x02	; 2
    128c:	85 bf       	out	0x35, r24	; 53
    128e:	85 b7       	in	r24, 0x35	; 53
    1290:	81 60       	ori	r24, 0x01	; 1
    1292:	85 bf       	out	0x35, r24	; 53
			break;
		}
		/*Enable preiphral interrupt*/
		SET_BIT(GICR,INT0);
    1294:	8b b7       	in	r24, 0x3b	; 59
    1296:	80 64       	ori	r24, 0x40	; 64
    1298:	8b bf       	out	0x3b, r24	; 59
		
		break;
    129a:	26 c0       	rjmp	.+76     	; 0x12e8 <EXT_INTERRUPT_Initialization+0xaa>
		
		case EXT_INT1:
		switch(sense)
    129c:	61 30       	cpi	r22, 0x01	; 1
    129e:	69 f0       	breq	.+26     	; 0x12ba <EXT_INTERRUPT_Initialization+0x7c>
    12a0:	28 f0       	brcs	.+10     	; 0x12ac <EXT_INTERRUPT_Initialization+0x6e>
    12a2:	62 30       	cpi	r22, 0x02	; 2
    12a4:	89 f0       	breq	.+34     	; 0x12c8 <EXT_INTERRUPT_Initialization+0x8a>
    12a6:	63 30       	cpi	r22, 0x03	; 3
    12a8:	b1 f0       	breq	.+44     	; 0x12d6 <EXT_INTERRUPT_Initialization+0x98>
    12aa:	1b c0       	rjmp	.+54     	; 0x12e2 <EXT_INTERRUPT_Initialization+0xa4>
		{
			case LOW:
			CLR_BIT(MCUCR,ISC11);  CLR_BIT(MCUCR,ISC10);
    12ac:	85 b7       	in	r24, 0x35	; 53
    12ae:	87 7f       	andi	r24, 0xF7	; 247
    12b0:	85 bf       	out	0x35, r24	; 53
    12b2:	85 b7       	in	r24, 0x35	; 53
    12b4:	8b 7f       	andi	r24, 0xFB	; 251
    12b6:	85 bf       	out	0x35, r24	; 53
			break;
    12b8:	14 c0       	rjmp	.+40     	; 0x12e2 <EXT_INTERRUPT_Initialization+0xa4>
			
			case HIGH:
			CLR_BIT(MCUCR,ISC11);  SET_BIT(MCUCR,ISC10);
    12ba:	85 b7       	in	r24, 0x35	; 53
    12bc:	87 7f       	andi	r24, 0xF7	; 247
    12be:	85 bf       	out	0x35, r24	; 53
    12c0:	85 b7       	in	r24, 0x35	; 53
    12c2:	84 60       	ori	r24, 0x04	; 4
    12c4:	85 bf       	out	0x35, r24	; 53
			break;
    12c6:	0d c0       	rjmp	.+26     	; 0x12e2 <EXT_INTERRUPT_Initialization+0xa4>
			
			case FAILING:
			SET_BIT(MCUCR,ISC11);  CLR_BIT(MCUCR,ISC10);
    12c8:	85 b7       	in	r24, 0x35	; 53
    12ca:	88 60       	ori	r24, 0x08	; 8
    12cc:	85 bf       	out	0x35, r24	; 53
    12ce:	85 b7       	in	r24, 0x35	; 53
    12d0:	8b 7f       	andi	r24, 0xFB	; 251
    12d2:	85 bf       	out	0x35, r24	; 53
			break;
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <EXT_INTERRUPT_Initialization+0xa4>
			
			case RISING:
			SET_BIT(MCUCR,ISC11);  SET_BIT(MCUCR,ISC10);
    12d6:	85 b7       	in	r24, 0x35	; 53
    12d8:	88 60       	ori	r24, 0x08	; 8
    12da:	85 bf       	out	0x35, r24	; 53
    12dc:	85 b7       	in	r24, 0x35	; 53
    12de:	84 60       	ori	r24, 0x04	; 4
    12e0:	85 bf       	out	0x35, r24	; 53
			break;
		}
		/*Enable peripheral interrupt*/
			SET_BIT(GICR,INT1);
    12e2:	8b b7       	in	r24, 0x3b	; 59
    12e4:	80 68       	ori	r24, 0x80	; 128
    12e6:	8b bf       	out	0x3b, r24	; 59
		break;
	}
	
	
	/*Enable global interrupt after initialization*/
	SET_BIT(SREG,7);
    12e8:	8f b7       	in	r24, 0x3f	; 63
    12ea:	80 68       	ori	r24, 0x80	; 128
    12ec:	8f bf       	out	0x3f, r24	; 63
    12ee:	08 95       	ret

000012f0 <UART_Initialize>:
	uint16_t UBRR_Val = 0;
	UBRR_Val=(uint16_t)(8000000/(2 * 8 * 9600)-1);
	UBRRL  &=~(1<<15);
	
	UBRRL = (uint8_t)UBRR_Val;
	UBRRH =(UBRR_Val >> 8);	
    12f0:	88 98       	cbi	0x11, 0	; 17
    12f2:	89 9a       	sbi	0x11, 1	; 17
    12f4:	8a b1       	in	r24, 0x0a	; 10
    12f6:	88 61       	ori	r24, 0x18	; 24
    12f8:	8a b9       	out	0x0a, r24	; 10
    12fa:	80 b5       	in	r24, 0x20	; 32
    12fc:	86 68       	ori	r24, 0x86	; 134
    12fe:	80 bd       	out	0x20, r24	; 32
    1300:	83 e3       	ldi	r24, 0x33	; 51
    1302:	89 b9       	out	0x09, r24	; 9
    1304:	10 bc       	out	0x20, r1	; 32
    1306:	08 95       	ret

00001308 <UART_Received>:
    1308:	5f 9b       	sbis	0x0b, 7	; 11
    130a:	fe cf       	rjmp	.-4      	; 0x1308 <UART_Received>
    130c:	8c b1       	in	r24, 0x0c	; 12
    130e:	08 95       	ret

00001310 <UART_SENDSTRING>:
    1310:	fc 01       	movw	r30, r24
    1312:	90 81       	ld	r25, Z
    1314:	99 23       	and	r25, r25
    1316:	39 f0       	breq	.+14     	; 0x1326 <UART_SENDSTRING+0x16>
    1318:	31 96       	adiw	r30, 0x01	; 1
    131a:	5d 9b       	sbis	0x0b, 5	; 11
    131c:	fe cf       	rjmp	.-4      	; 0x131a <UART_SENDSTRING+0xa>
    131e:	9c b9       	out	0x0c, r25	; 12
    1320:	91 91       	ld	r25, Z+
    1322:	91 11       	cpse	r25, r1
    1324:	fa cf       	rjmp	.-12     	; 0x131a <UART_SENDSTRING+0xa>
    1326:	08 95       	ret

00001328 <uart_sendchar>:
}

void uart_sendchar(uint8_t * data)
{
	while(!((UCSRA>>UDRE)&1));
    1328:	5d 9b       	sbis	0x0b, 5	; 11
    132a:	fe cf       	rjmp	.-4      	; 0x1328 <uart_sendchar>
	UDR = data;
    132c:	8c b9       	out	0x0c, r24	; 12
    132e:	08 95       	ret

00001330 <__tablejump2__>:
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	05 90       	lpm	r0, Z+
    1336:	f4 91       	lpm	r31, Z
    1338:	e0 2d       	mov	r30, r0
    133a:	09 94       	ijmp

0000133c <__umulhisi3>:
    133c:	a2 9f       	mul	r26, r18
    133e:	b0 01       	movw	r22, r0
    1340:	b3 9f       	mul	r27, r19
    1342:	c0 01       	movw	r24, r0
    1344:	a3 9f       	mul	r26, r19
    1346:	70 0d       	add	r23, r0
    1348:	81 1d       	adc	r24, r1
    134a:	11 24       	eor	r1, r1
    134c:	91 1d       	adc	r25, r1
    134e:	b2 9f       	mul	r27, r18
    1350:	70 0d       	add	r23, r0
    1352:	81 1d       	adc	r24, r1
    1354:	11 24       	eor	r1, r1
    1356:	91 1d       	adc	r25, r1
    1358:	08 95       	ret

0000135a <ltoa>:
    135a:	25 32       	cpi	r18, 0x25	; 37
    135c:	31 05       	cpc	r19, r1
    135e:	20 f4       	brcc	.+8      	; 0x1368 <ltoa+0xe>
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	10 f0       	brcs	.+4      	; 0x1368 <ltoa+0xe>
    1364:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__ltoa_ncheck>
    1368:	fa 01       	movw	r30, r20
    136a:	10 82       	st	Z, r1
    136c:	ca 01       	movw	r24, r20
    136e:	08 95       	ret

00001370 <__ltoa_ncheck>:
    1370:	bb 27       	eor	r27, r27
    1372:	2a 30       	cpi	r18, 0x0A	; 10
    1374:	51 f4       	brne	.+20     	; 0x138a <__ltoa_ncheck+0x1a>
    1376:	99 23       	and	r25, r25
    1378:	42 f4       	brpl	.+16     	; 0x138a <__ltoa_ncheck+0x1a>
    137a:	bd e2       	ldi	r27, 0x2D	; 45
    137c:	90 95       	com	r25
    137e:	80 95       	com	r24
    1380:	70 95       	com	r23
    1382:	61 95       	neg	r22
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	8f 4f       	sbci	r24, 0xFF	; 255
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__ultoa_common>

0000138e <__ultoa_ncheck>:
    138e:	bb 27       	eor	r27, r27

00001390 <__ultoa_common>:
    1390:	fa 01       	movw	r30, r20
    1392:	a6 2f       	mov	r26, r22
    1394:	62 17       	cp	r22, r18
    1396:	71 05       	cpc	r23, r1
    1398:	81 05       	cpc	r24, r1
    139a:	91 05       	cpc	r25, r1
    139c:	33 0b       	sbc	r19, r19
    139e:	30 fb       	bst	r19, 0
    13a0:	66 f0       	brts	.+24     	; 0x13ba <__ultoa_common+0x2a>
    13a2:	aa 27       	eor	r26, r26
    13a4:	66 0f       	add	r22, r22
    13a6:	77 1f       	adc	r23, r23
    13a8:	88 1f       	adc	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	aa 1f       	adc	r26, r26
    13ae:	a2 17       	cp	r26, r18
    13b0:	10 f0       	brcs	.+4      	; 0x13b6 <__ultoa_common+0x26>
    13b2:	a2 1b       	sub	r26, r18
    13b4:	63 95       	inc	r22
    13b6:	38 50       	subi	r19, 0x08	; 8
    13b8:	a9 f7       	brne	.-22     	; 0x13a4 <__ultoa_common+0x14>
    13ba:	a0 5d       	subi	r26, 0xD0	; 208
    13bc:	aa 33       	cpi	r26, 0x3A	; 58
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <__ultoa_common+0x32>
    13c0:	a9 5d       	subi	r26, 0xD9	; 217
    13c2:	a1 93       	st	Z+, r26
    13c4:	36 f7       	brtc	.-52     	; 0x1392 <__ultoa_common+0x2>
    13c6:	b1 11       	cpse	r27, r1
    13c8:	b1 93       	st	Z+, r27
    13ca:	10 82       	st	Z, r1
    13cc:	ca 01       	movw	r24, r20
    13ce:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <strrev>

000013d2 <strrev>:
    13d2:	dc 01       	movw	r26, r24
    13d4:	fc 01       	movw	r30, r24
    13d6:	67 2f       	mov	r22, r23
    13d8:	71 91       	ld	r23, Z+
    13da:	77 23       	and	r23, r23
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <strrev+0x4>
    13de:	32 97       	sbiw	r30, 0x02	; 2
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <strrev+0x18>
    13e2:	7c 91       	ld	r23, X
    13e4:	6d 93       	st	X+, r22
    13e6:	70 83       	st	Z, r23
    13e8:	62 91       	ld	r22, -Z
    13ea:	ae 17       	cp	r26, r30
    13ec:	bf 07       	cpc	r27, r31
    13ee:	c8 f3       	brcs	.-14     	; 0x13e2 <strrev+0x10>
    13f0:	08 95       	ret

000013f2 <_exit>:
    13f2:	f8 94       	cli

000013f4 <__stop_program>:
    13f4:	ff cf       	rjmp	.-2      	; 0x13f4 <__stop_program>
